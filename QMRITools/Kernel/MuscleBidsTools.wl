(* ::Package:: *)

(* ::Title:: *)
(*QMRITools MuscleBidsTools*)


(* ::Subtitle:: *)
(*Written by: Martijn Froeling, PhD*)
(*m.froeling@gmail.com*)


(* ::Section:: *)
(*Begin Package*)


BeginPackage["QMRITools`MuscleBidsTools`", Join[{"Developer`"}, Complement[QMRITools`$Contexts, {"QMRITools`MuscleBidsTools`"}]]];


(* ::Section:: *)
(*Usage Notes*)


(* ::Subsection:: *)
(*Functions*)


ImportJSON::usage = 
"ImportJSON[file] impors a json file as rawJSON."

GetJSONPosition::usage = 
"GetJSONPosition[{json..}, {{key, value}..}] gets the position from a list of JSON association lists where keys have the given value.
GetJSONPosition[{json..}, {{key, value}..}, sortkey] same but finaly sorts the positions for the value of the sortkey."

MergeJSON::usage = 
"MergeJSON[{json..}] merges a list of JSON association lists where duplicate keys with same values are removed and duplicate keys with different values are merges."

AddToJson::usage = 
"AddToJson[json, <|key->value..|>] adds new keys and values to the JSON list where duplicte keys are eitehr removed or joined.
AddToJson[json, \"QMRITools\"] adds the QMRITools software version to the json."


PartitionBidsName::usage = 
"PartitionBidsName[name] converts a Bids name to the a Bids labels as an association, i.e. {\"sub\",\"ses\",\"stk\",\"rep\",\"type\",\"suf\"}."

PartitionBidsFolderName::usage = 
"PartitionBidsFolderName[fol] partitions the Bids folder and file name. it retruns the bids root folder and the label parts using PartitionBidsName."

GenerateBidsName::usage = 
"GenerateBidsName[parts] generates a Bids file name from the Bids labels association which can be generated by PartitionBidsName."

GenerateBidsFileName::usage = 
"GenerateBidsFileName[parts] generates a Bids file name from the Bids labels association which can be generated by PartitionBidsName.
GenerateBidsFileName[fol, parts] the same but with a custom root folder."

SelectBidsFolders::usage =
"SelectBidsFolders[fol, tag] Selects all folders in the fol with the name tag."


(* ::Subsection:: *)
(*Options*)


BidsIncludeSession::usage = 
"BidsIncludeSession is an option for SelectBidsFolders. If set True it looks in session folders else only in subject folders."


(* ::Subsection:: *)
(*Error Messages*)


(* ::Section:: *)
(*Functions*)


Begin["`Private`"] 


(* ::Subsection:: *)
(*BIDS*)


(* ::Subsubsection::Closed:: *)
(*General Definitions*)


bidsTypes = <|
	(*anata types*)
	"T1w"->"anat","T1w-FS"->"anat","T2w"->"anat","T2w-FS"->"anat",
	(*dixon*)
	"megre"->"dix","mese"->"dix",
	(*quant types*)
	"T1"->"quant","T2"->"quant","wT2"->"quant",
	(*diff types*)
	"dwi"->"dwi"
|>;

bidsName = {"sub","ses","stk","rep","type","suf"};


(* ::Subsubsection::Closed:: *)
(*PartitionBidsName*)


SyntaxInformation[PartitionBidsName] = {"ArgumentsPattern" -> {_}};

PartitionBidsName[string_]:=Block[{parts,labs,suf},
	parts=StringSplit[#,"-"]&/@StringSplit[string,"_"];
	labs=Rule@@#&/@Select[parts,Length[#]===2&];
	suf=Flatten[Select[parts,Length[#]=!=2&]];
	suf=If[suf=!={},If[MemberQ[Keys[bidsTypes],First@suf],{"type"->First@suf,"suf"->Rest@suf},{"suf"->suf}],{"suf"->{}}];
	Association[Join[labs,suf]]
] 


(* ::Subsubsection::Closed:: *)
(*PartitionBidsFolderName*)


SyntaxInformation[PartitionBidsFolderName] = {"ArgumentsPattern" -> {_}};

PartitionBidsFolderName[fol_]:={
	First@StringSplit[fol,"sub-"],PartitionBidsName@StringJoin@Riffle[Select[FileNameSplit[fol],StringContainsQ[#,"-"]&],"_"]
} 


(* ::Subsubsection::Closed:: *)
(*GenerateBidsName*)


SyntaxInformation[GenerateBidsName] = {"ArgumentsPattern" -> {_}};

GenerateBidsName[parts_]:=StringJoin[Riffle[Select[Join[
	BidsString[parts,{"sub","ses","stk","rep"}],BidsValue[parts,{"type","suf"}
]],#=!=""&],"_"]]


(* ::Subsubsection::Closed:: *)
(*GenerateBidsFileName*)


SyntaxInformation[GenerateBidsFileName] = {"ArgumentsPattern" -> {_, _.}};

GenerateBidsFileName[parts_]:=GenerateBidsFileName["",parts]

GenerateBidsFileName[fol_?StringQ, parts_]:=FileNameJoin[Select[{
	fol, BidsString[parts,"sub"], BidsString[parts,"ses"], BidsType[parts], GenerateBidsName[parts]
},#1=!=""&]]


(* ::Subsubsection::Closed:: *)
(*GenerateBidsFileName*)


Options[SelectBidsFolders]={BidsIncludeSession->True};

SyntaxInformation[SelectBidsFolders] = {"ArgumentsPattern" -> {_, _,OptionsPattern[]}};

SelectBidsFolders[niiFol_, tag_,OptionsPattern[]]:=Select[FileNames[All,niiFol,If[OptionValue[BidsIncludeSession],{3},{2}]],(DirectoryQ[#]&&FileBaseName[#]===tag)&]


(* ::Subsubsection::Closed:: *)
(*BidsType*)


BidsType[parts_]:=bidsTypes[parts["type"]]/.{Missing[___]->"miss"} 


(* ::Subsubsection::Closed:: *)
(*BidsString*)


BidsString[parts_,val_?ListQ]:=BidsString[parts,#]&/@val

BidsString[parts_,val_?StringQ]:=Block[{str},
	str=parts[val]/.Missing[___]->"";
	If[str==="","",val<>"-"<>str]
]


(* ::Subsubsection:: *)
(*BidsValue*)


BidsValue[parts_,val_?ListQ]:=Flatten[BidsValue[parts,#]&/@val]

BidsValue[parts_,val_?StringQ]:=parts[val]/.Missing[___]->"" 


(* ::Subsubsection:: *)
(*CheckBidsTypes*)


CheckBidsTypes[type_]:=If[!MemberQ[Drop[Keys[bidsTypes],-1],type],Message[Bids::type,type]]


(* ::Subsection:: *)
(*JSON*)


(* ::Subsubsection::Closed:: *)
(*ImportJSON*)


ImportJSON[file_]:=Import[file,"RawJSON"]


(* ::Subsubsection::Closed:: *)
(*GetJSONPosition*)


GetJSONPosition[json_,selection_]:=GetJSONPosition[json,selection,""]

GetJSONPosition[json_,selection_,sort_]:=Block[{seli,self,list,key,val,inds,pos},
	seli = ToLowerCase[Last[Flatten[{#1/.#3}]]]===ToLowerCase[#2]&;
	self = (list=#1;key=#2[[1]];val=#2[[2]];Select[list,seli[key,val,json[[#]]]&])&;
	inds = Range[Length[json]];
	pos = Fold[self,inds,selection];
	If[sort==="", pos, pos[[Ordering[sort/.json[[pos]]]]]]
]


(* ::Subsubsection::Closed:: *)
(*MergeJSON*)


MergeJSON[json:{_?AssociationQ..}]:=Block[{keys},
keys=DeleteDuplicates[Flatten[Keys/@json]];
Association[If[#[[2]]==={},Nothing,#]&/@Thread[
keys->(If[Length[#]===1,First@#,#]&/@(
(DeleteDuplicates/@Transpose[(#/@keys)&/@json])/.Missing[___]->Nothing))]
]]



(* ::Subsubsection::Closed:: *)
(*AddToJson*)


AddToJson[json_,add_]:=MergeJSON[{json,
	Switch[add,
		"QMRITools",<|"ConversionSoftware"->"QMRITools.com","ConversionSoftwareVersion"->QMRITools`$InstalledVersion|>,
		_,{json,add}]}
]


(* ::Section:: *)
(*End Package*)


End[]

EndPackage[]
