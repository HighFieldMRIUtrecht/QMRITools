(* Content-type: application/vnd.wolfram.cdf.text *)

(*** Wolfram CDF File ***)
(* http://www.wolfram.com/cdf *)

(* CreatedBy='Mathematica 13.1' *)

(***************************************************************************)
(*                                                                         *)
(*                                                                         *)
(*  Under the Wolfram FreeCDF terms of use, this file and its content are  *)
(*  bound by the Creative Commons BY-SA Attribution-ShareAlike license.    *)
(*                                                                         *)
(*        For additional information concerning CDF licensing, see:        *)
(*                                                                         *)
(*         www.wolfram.com/cdf/adopting-cdf/licensing-options.html         *)
(*                                                                         *)
(*                                                                         *)
(***************************************************************************)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[      1088,         20]
NotebookDataLength[    177514,       3149]
NotebookOptionsPosition[    178085,       3148]
NotebookOutlinePosition[    178485,       3164]
CellTagsIndexPosition[    178442,       3161]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{QMRITools`GradientTools`Private`app$$ = GrayLevel[1], 
    QMRITools`GradientTools`Private`bi$$ = 0, 
    QMRITools`GradientTools`Private`bvalc$$ = 9000, 
    QMRITools`GradientTools`Private`bvald$$ = {10, 20, 30, 40, 60, 80, 100, 
    200, 300, 500, 700, 1000}, QMRITools`GradientTools`Private`bvall$$ = {
    1000}, QMRITools`GradientTools`Private`bvals$$ = {1000, 2000, 3000, 4000, 
    5000, 6000}, QMRITools`GradientTools`Private`charge$$ = Null, 
    QMRITools`GradientTools`Private`charts$$ = {
     Graphics[{{
        RGBColor[0.8518518518518519, 0.8518518518518519, 0.8518518518518519], 
        Polygon[CompressedData["
1:eJxlUc0KAVEYnbyDlIWoabLzAuKbjZWmECspNBIL6ykNrzLlFZTlt1AjVl6B
DeUhUOebctyabnfu+c7frUxW3TDnOI73+b77z9oONCqKv/ebqum5FFcHei3f
7u4p0EOaeInbV8M98qNlsO5pYbO7PF9DnR+jeFHvYB/jfxu4KeZa4AnB24DO
DLo14GZqluheaF6IX0hfyJ+Qf6F8QvmF+vk7Ay+GB58Yn+FMD37E/MCvmF/k
EcuDvGJ50YdYH+gr80X3SvNK/Er6Sv6U/CvlU8qfvZv1/AYmsupg
         "]]}, {{
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQjQIawg5USjk4bnW0P3Dg+Cm5Oo2wAxcVHj1WOeF3
YMfxhWoLVUIPwNS9EI3L9qsJPiBev+T0yzcxBzKOVNZl2QRC6USouA9UXTJU
nxvUnFSouXZQe9Kg9upD1aUdgDkJTd4BTb8DmvkOaPY7oLnPAc39Dmj+c0Dz
vwNa+DgAAGfNekc=
          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQjQIawg6kZm/lFuexOnDg+Cm5Oo2wA8zHJmacXOZ5
YMfxhWoLVUIPgNUdCDrwQjQu268m+MDLzLgrh6QiDmQcqazLsgk8wPzp1CW2
XTEHxOuXnH75xufAmz3KLG9sEiD6GtwO5Knd8Wqbl3jgosKjxyon7A6ULgs+
IlyedKBSysFxq6M+1PykAzAnock7oOl3QDPfAc1+BzT3OaC53wHNfw5o/ndA
Cx8HAKUAeQ0=
          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQjQIawg4E7NG6VnHN5MCB46fk6jTCDphlO77NbXU5
sOP4QrWFKqEHIAr9DrwQjcv2qwk+sCtE4u5sj+ADGUcq67JsAg+YRi9aYfE7
7IB4/ZLTL9/4HLh//JKl8O9IiL4GtwNeXLr3rhnEHLio8Oixygm7A2FcOy8H
dcceqJRycNzqqA81P+4AzElo8g5o+h3QzHdAs98BzX0OaO53QPOfA5r/HdDC
xwEACXJ4HQ==
          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQjQIawg5USjk4bnXUP3Dg+Cm5Oo2wAxcVHj1WOWF3
YMfxhWoLVUIPQNS5HXghGpftVxN8QLx+yemXb3wOZByprMuyCYTTMHGYOpg+
mDkwc2H2wOyFuQPmJDR5BzT9DmjmO6DZ74DmPgc09zug+c8Bzf8OaOHjAADE
Hnk3
          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQjQIawg4E7NG6VnFN5cCB46fk6jTCDphlO77NbTU5
sOP4QrWFKqEHIArtDrwQjcv2qwk+sCtE4u5sD+cDGUcq67JsAg+YRi9aYfHb
7YB4/ZLTL9/4HLh//JKl8G9PiL4GtwNeXLr3rhn4HLio8Oixygm7A2FcOy8H
dfseqJRycNzqqA813+8AzElo8g5o+h3QzHdAs98BzX0OaO53QPOfA5r/HdDC
xwEAZcN3DQ==
          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQjQIawg4E7NG6VnFN5MCB46fk6jTCDphlO77NbVU5
sOP4QrWFKqEHIAr1DrwQjcv2qwk+sCtE4u5sD+MDGUcq67JsAg+YRi9aYfHb
7IB4/ZLTL9/4HLh//JKl8G9LiL4GtwNeXLr3rhnYHLio8Oixygm7A2FcOy8H
ddseqJRycNzqqA813+4AzElo8g5o+h3QzHdAs98BzX0OaO53QPOfA5r/HdDC
xwEAwhR1/Q==
          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQjQIawg7AmAeOn5Kr00DwdxxfqLZQJRTOfyEal+1X
EwznZxyprMuyCYTzxeuXnH75xgfOh5jvBudfVHj0WOWEHZxfKeXguNVRH1U9
EoDKO6Dpd0BR1OAG50Pth/Oh7oPzoe6H86H+g/Oh/kczP8wBAGXpPAc=
          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQjQIawg4E7NG6VnFNxOHA8VNydRphB8yyHd/mtqo4
7Di+UG2hSugBiEI9hxeicdl+NcEHdoVI3J3tYeyQcaSyLssm8IBp9KIVFr/N
HMTrl5x++cbnwP3jlyyFf1s6QMx3O+DFpXvvmoGNw0WFR49VTtgdCOPaeTmo
29ahUsrBcaujPtR8OweYk9DkHdD0O6CZ74BmvwOa+xzQ3O+A5j8HNP/D3QEN
HwcArUltfQ==
          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQjQIawg4E7NG6VnFNxeHA8VNydRphB8yyHd/mtpo4
7Di+UG2hSugBiEI7hxeicdl+NcEHdoVI3J3t4eyQcaSyLssm8IBp9KIVFr/d
HMTrl5x++cbnwP3jlyyFf3s6QMx3O+DFpXvvmoGPw0WFR49VTtgdCOPaeTmo
29ehUsrBcaujPtR8PweYk9DkHdD0O6CZ74BmvwOa+xzQ3O+A5j8HNP/D3QEN
HwcAUPhujQ==
          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQjQIawg5USjk4bnXUdzhw/JRcnUbYgYsKjx6rnLBz
2HF8odpCldADEHVuDi9E47L9aoIPiNcvOf3yjY9DxpHKuiybwANQ2gEqfgCq
zgGq7wDUHAeouQeg9jhA7YWaH+YAcxKavAOafgc08x3Q7HdAc58Dmvsd0Pzn
gOZ/uDtg7gIAr1Nwtw==
          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQjQIawg4E7NG6VnHNxOHA8VNydRphB8yyHd/mtro4
7Di+UG2hSugBiEI/hxeicdl+NcEHdoVI3J3tEeyQcaSyLssm8IBp9KIVFr/D
HMTrl5x++cbnwP3jlyyFf0c6QMx3O+DFpXvvmkGMw0WFR49VTtgdCOPaeTmo
O9ahUsrBcaujPtT8OAeYk9DkHdD0O6CZ74BmvwOa+xzQ3O+A5j8HNP/D3QEN
HwcA9JhvnQ==
          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQjQIawg6kZm/lFuexcjhw/JRcnUbYAeZjEzNOLvN0
2HF8odpCldADYHUHghxeiMZl+9UEH3iZGXflkFSEQ8aRyrosm8ADzJ9OXWLb
FeMgXr/k9Ms3Pgfe7FFmeWOT4AAx3+1Antodr7Z5iQ4XFR49Vjlhd6B0WfAR
4fIkh0opB8etjvpQ85McYE5Ck3dA0++AZr4Dmv0OaO5zQHO/A5r/HND8D3cH
NHwcAJA1cI0=
          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQjQIawg5USjk4bnW0dzhw/JRcnUbYgYsKjx6rnPBz
2HF8odpCldADUHUOL0Tjsv1qgg+I1y85/fJNjEPGkcq6LJvAAxA60QEi7nMA
oi7ZAaLP7QDEnFQHiLl2ByD2pDlA7NWHmp/mAHMSmrwDmn4HNPMd0Ox3QHOf
A5r7HdD854Dmf7g7YPoAUwJxxw==
          "]]}}, {{
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{0., -90.}, {0., -90.}, {0., -90.}, {0., -90.}, {0., -90.}, {
          0., -90.}, {0., -90.}, {0., -90.}, {0., -90.}, {0., -90.}, {
          0., -90.}, {0., -90.}, {0., -90.}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-31.25667198004746, -88.63269777109872}, {-26.04722665003955, \
-88.63269777109872}, {-20.837781320031638`, -88.63269777109872}, \
{-15.62833599002373, -88.63269777109872}, {-10.418890660015819`, \
-88.63269777109872}, {-5.2094453300079095`, -88.63269777109872}, {
          0., -88.63269777109872}, {
          5.2094453300079095`, -88.63269777109872}, {
          10.418890660015819`, -88.63269777109872}, {
          15.62833599002373, -88.63269777109872}, {
          20.837781320031638`, -88.63269777109872}, {
          26.04722665003955, -88.63269777109872}, {
          31.25667198004746, -88.63269777109872}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-61.56362579862037, -84.57233587073176}, \
{-51.303021498850306`, -84.57233587073176}, {-41.04241719908025, \
-84.57233587073176}, {-30.781812899310186`, -84.57233587073176}, \
{-20.521208599540124`, -84.57233587073176}, {-10.260604299770062`, \
-84.57233587073176}, {0., -84.57233587073176}, {
          10.260604299770062`, -84.57233587073176}, {
          20.521208599540124`, -84.57233587073176}, {
          30.781812899310186`, -84.57233587073176}, {
          41.04241719908025, -84.57233587073176}, {
          51.303021498850306`, -84.57233587073176}, {
          61.56362579862037, -84.57233587073176}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-90., -77.94228634059948}, {-75., -77.94228634059948}, {-60., \
-77.94228634059948}, {-45., -77.94228634059948}, {-30., -77.94228634059948}, \
{-15., -77.94228634059948}, {0., -77.94228634059948}, {
          15., -77.94228634059948}, {30., -77.94228634059948}, {
          45., -77.94228634059948}, {60., -77.94228634059948}, {
          75., -77.94228634059948}, {90., -77.94228634059948}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-115.70176974357706`, -68.94399988070802}, \
{-96.41814145298089, -68.94399988070802}, {-77.1345131623847, \
-68.94399988070802}, {-57.85088487178853, -68.94399988070802}, \
{-38.56725658119235, -68.94399988070802}, {-19.283628290596177`, \
-68.94399988070802}, {0., -68.94399988070802}, {
          19.283628290596177`, -68.94399988070802}, {
          38.56725658119235, -68.94399988070802}, {
          57.85088487178853, -68.94399988070802}, {
          77.1345131623847, -68.94399988070802}, {
          96.41814145298089, -68.94399988070802}, {
          115.70176974357706`, -68.94399988070802}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-137.88799976141604`, -57.85088487178853}, \
{-114.9066664678467, -57.85088487178853}, {-91.92533317427736, \
-57.85088487178853}, {-68.94399988070802, -57.85088487178853}, \
{-45.96266658713868, -57.85088487178853}, {-22.98133329356934, \
-57.85088487178853}, {0., -57.85088487178853}, {
          22.98133329356934, -57.85088487178853}, {
          45.96266658713868, -57.85088487178853}, {
          68.94399988070802, -57.85088487178853}, {
          91.92533317427736, -57.85088487178853}, {
          114.9066664678467, -57.85088487178853}, {
          137.88799976141604`, -57.85088487178853}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-155.88457268119896`, -45.}, {-129.9038105676658, -45.}, \
{-103.92304845413263`, -45.}, {-77.94228634059948, -45.}, \
{-51.96152422706631, -45.}, {-25.980762113533157`, -45.}, {0., -45.}, {
          25.980762113533157`, -45.}, {51.96152422706631, -45.}, {
          77.94228634059948, -45.}, {103.92304845413263`, -45.}, {
          129.9038105676658, -45.}, {155.88457268119896`, -45.}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-169.14467174146353`, -30.781812899310186`}, \
{-140.95389311788625`, -30.781812899310186`}, {-112.76311449430901`, \
-30.781812899310186`}, {-84.57233587073176, -30.781812899310186`}, \
{-56.381557247154504`, -30.781812899310186`}, {-28.190778623577252`, \
-30.781812899310186`}, {0., -30.781812899310186`}, {
          28.190778623577252`, -30.781812899310186`}, {
          56.381557247154504`, -30.781812899310186`}, {
          84.57233587073176, -30.781812899310186`}, {
          112.76311449430901`, -30.781812899310186`}, {
          140.95389311788625`, -30.781812899310186`}, {
          169.14467174146353`, -30.781812899310186`}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-177.26539554219744`, -15.62833599002373}, \
{-147.7211629518312, -15.62833599002373}, {-118.17693036146497`, \
-15.62833599002373}, {-88.63269777109872, -15.62833599002373}, \
{-59.088465180732484`, -15.62833599002373}, {-29.544232590366242`, \
-15.62833599002373}, {0., -15.62833599002373}, {
          29.544232590366242`, -15.62833599002373}, {
          59.088465180732484`, -15.62833599002373}, {
          88.63269777109872, -15.62833599002373}, {
          118.17693036146497`, -15.62833599002373}, {
          147.7211629518312, -15.62833599002373}, {
          177.26539554219744`, -15.62833599002373}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., 0.}, {-150., 0.}, {-120., 0.}, {-90., 0.}, {-60., 
          0.}, {-30., 0.}, {0., 0.}, {30., 0.}, {60., 0.}, {90., 0.}, {120., 
          0.}, {150., 0.}, {180., 0.}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-177.26539554219744`, 15.62833599002373}, {-147.7211629518312,
           15.62833599002373}, {-118.17693036146497`, 
          15.62833599002373}, {-88.63269777109872, 
          15.62833599002373}, {-59.088465180732484`, 
          15.62833599002373}, {-29.544232590366242`, 15.62833599002373}, {0., 
          15.62833599002373}, {29.544232590366242`, 15.62833599002373}, {
          59.088465180732484`, 15.62833599002373}, {88.63269777109872, 
          15.62833599002373}, {118.17693036146497`, 15.62833599002373}, {
          147.7211629518312, 15.62833599002373}, {177.26539554219744`, 
          15.62833599002373}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-169.14467174146353`, 
          30.781812899310186`}, {-140.95389311788625`, 
          30.781812899310186`}, {-112.76311449430901`, 
          30.781812899310186`}, {-84.57233587073176, 
          30.781812899310186`}, {-56.381557247154504`, 
          30.781812899310186`}, {-28.190778623577252`, 30.781812899310186`}, {
          0., 30.781812899310186`}, {28.190778623577252`, 
          30.781812899310186`}, {56.381557247154504`, 30.781812899310186`}, {
          84.57233587073176, 30.781812899310186`}, {112.76311449430901`, 
          30.781812899310186`}, {140.95389311788625`, 30.781812899310186`}, {
          169.14467174146353`, 30.781812899310186`}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-155.88457268119896`, 45.}, {-129.9038105676658, 
          45.}, {-103.92304845413263`, 45.}, {-77.94228634059948, 
          45.}, {-51.96152422706631, 45.}, {-25.980762113533157`, 45.}, {0., 
          45.}, {25.980762113533157`, 45.}, {51.96152422706631, 45.}, {
          77.94228634059948, 45.}, {103.92304845413263`, 45.}, {
          129.9038105676658, 45.}, {155.88457268119896`, 45.}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-137.88799976141604`, 57.85088487178853}, {-114.9066664678467,
           57.85088487178853}, {-91.92533317427736, 
          57.85088487178853}, {-68.94399988070802, 
          57.85088487178853}, {-45.96266658713868, 
          57.85088487178853}, {-22.98133329356934, 57.85088487178853}, {0., 
          57.85088487178853}, {22.98133329356934, 57.85088487178853}, {
          45.96266658713868, 57.85088487178853}, {68.94399988070802, 
          57.85088487178853}, {91.92533317427736, 57.85088487178853}, {
          114.9066664678467, 57.85088487178853}, {137.88799976141604`, 
          57.85088487178853}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-115.70176974357706`, 68.94399988070802}, {-96.41814145298089,
           68.94399988070802}, {-77.1345131623847, 
          68.94399988070802}, {-57.85088487178853, 
          68.94399988070802}, {-38.56725658119235, 
          68.94399988070802}, {-19.283628290596177`, 68.94399988070802}, {0., 
          68.94399988070802}, {19.283628290596177`, 68.94399988070802}, {
          38.56725658119235, 68.94399988070802}, {57.85088487178853, 
          68.94399988070802}, {77.1345131623847, 68.94399988070802}, {
          96.41814145298089, 68.94399988070802}, {115.70176974357706`, 
          68.94399988070802}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-90., 77.94228634059948}, {-75., 77.94228634059948}, {-60., 
          77.94228634059948}, {-45., 77.94228634059948}, {-30., 
          77.94228634059948}, {-15., 77.94228634059948}, {0., 
          77.94228634059948}, {15., 77.94228634059948}, {30., 
          77.94228634059948}, {45., 77.94228634059948}, {60., 
          77.94228634059948}, {75., 77.94228634059948}, {90., 
          77.94228634059948}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-61.56362579862037, 84.57233587073176}, {-51.303021498850306`,
           84.57233587073176}, {-41.04241719908025, 
          84.57233587073176}, {-30.781812899310186`, 
          84.57233587073176}, {-20.521208599540124`, 
          84.57233587073176}, {-10.260604299770062`, 84.57233587073176}, {0., 
          84.57233587073176}, {10.260604299770062`, 84.57233587073176}, {
          20.521208599540124`, 84.57233587073176}, {30.781812899310186`, 
          84.57233587073176}, {41.04241719908025, 84.57233587073176}, {
          51.303021498850306`, 84.57233587073176}, {61.56362579862037, 
          84.57233587073176}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-31.25667198004746, 88.63269777109872}, {-26.04722665003955, 
          88.63269777109872}, {-20.837781320031638`, 
          88.63269777109872}, {-15.62833599002373, 
          88.63269777109872}, {-10.418890660015819`, 
          88.63269777109872}, {-5.2094453300079095`, 88.63269777109872}, {0., 
          88.63269777109872}, {5.2094453300079095`, 88.63269777109872}, {
          10.418890660015819`, 88.63269777109872}, {15.62833599002373, 
          88.63269777109872}, {20.837781320031638`, 88.63269777109872}, {
          26.04722665003955, 88.63269777109872}, {31.25667198004746, 
          88.63269777109872}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{0., 90.}, {0., 90.}, {0., 90.}, {0., 90.}, {0., 90.}, {0., 
          90.}, {0., 90.}, {0., 90.}, {0., 90.}, {0., 90.}, {0., 90.}, {0., 
          90.}, {0., 90.}}]}}}, AspectRatio -> 0.8, ImageSize -> 400, 
      PlotRange -> {{-185, 185}, {-95, 95}}, LabelStyle -> Directive[{Bold, 
         GrayLevel[0], Medium, FontFamily -> "Helvetica"}], Frame -> True, 
      FrameStyle -> Thickness[Large], Axes -> True, AxesStyle -> 
      Thickness[Large], 
      FrameTicks -> {{{{-90, -90}, {-78, -60}, {-45, -30}, {0, 0}, {45, 30}, {
         78, 60}, {90, 90}}, None}, {{-180, -150, -120, -90, -60, -30, 0, 30, 
         60, 90, 120, 150, 180}, None}}, 
      FrameLabel -> {
       "\[Phi] Cos[\[Theta]] (\[Degree])", 
        "\[Theta] Sin[\[Theta]] (\[Degree])"}], 
     Graphics[{{
        RGBColor[0.8518518518518519, 0.8518518518518519, 0.8518518518518519], 
        Polygon[CompressedData["
1:eJxt0k0KwyAQhuGhNwlITpC1zMKNGyFFPECg3eYKHm2OljSxiC8ZEHn4/BnB
advfn5eIzOf4zVfVr91zscGSR9cVeYIjHGAPL7CD0Z84xX7YwwGOcBpdV+QZ
eflbH93XK85T3KfoR9Gv4j3NC+zgVj037Ic9HOAIp9H9P7Q8Iy92AHWqVqg=

         "]]}, {{
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQDQYNaQcgdNgBFD5DCCq/IRBN3g+N74nGd0Hj26Hx
TdD4Kmh8NPcxqDig6Ufj26HxXdD4nmh8P1R+QyCafAiafJgDAGz9MOs=
          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQDQYHkg6A6YawAyh8hhBUfkMgmrwfGt8Tje+CxrdD
45ug8VXQ+GjuY1BxQNOPxrdD47ug8T3R+H6o/IZANPkQNPkwBwAfsjVf
          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQDQFxB8BUQ9gBFD5DCCq/IRBN3g+N74nGd0Hj26Hx
TdD4Kmh8NPcxqDig6Ufj26HxXdD4nmh8P1R+QyCafAiafJgDAFCzJtM=
          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQDQYNYQew0gwhaOKBaPJ+aHxPNL4LGt8OjW+CxldB
46O5j0HFAU0/Gt8Oje+CxvdE4/uh8hsC0eRD0OTDHAC2Di+7
          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQDQF+B8BUQ9gBFD5DCCq/IRBNHp32ROO7oPHt0Pgm
aHwVND6a+xhUHND0o/Ht0PguaHxPNL4fKr8hEE0+BE0+zAEAmcQlow==
          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQDQF2B8BUQ9gBFD5DCCq/IRBN3g+N74nGd0Hjo9Mm
aHwVND6a+xhUHND0o/Ht0PguaHxPNL4fKr8hEE0+BE0+zAEA4tUkcw==
          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQjQIawg6gCoSg8hsC0eT90PieaHwXNL4dGt8Eja+C
xkcHKg5o+tH4dmh8FzS+JxrfD5XfEIgmH4ImH+YAAJlMEZk=
          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQDQF2DmCqIewACp8hBJXfEIgm74fG90Tju6Dx7dD4
Jmh8FTQ+mvsYVBxQ+SZofHTaBY3vicb3Q+U3BKLJh6DJhzkAADUKGvM=
          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQDQF+DmCqIewACp8hBJXfEIgm74fG90Tju6Dx7dD4
Jmh8FTQ+mvsYVBxQ+SZofDs0vgsa3xONj0Y3BKKJh6DJhzkAAOvqHCM=
          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQDQYNYQ5Q+gAKnyEEld8QiCbvh8b3ROO7oPHt0Pgm
aHwVND6a+xhUHFD5Jmh8OzS+CxrfE43vh8pvCESTD0GTD3MAAAhDJjs=
          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQDQFxDmCqIewACp8hBJXfEIgm74fG90Tju6Dx7dD4
Jmh8FTQ+mvsYVBzQ9KPx7dD4Lmh8TzS+Hyq/IRBNPgRNPswBAKLZHVM=
          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQDQYHkhzAdEPYARQ+QwgqvyEQTd4Pje+JxndB49uh
8U3Q+CpofDT3Mag4oOlH49uh8V3Q+J5ofD9UfkMgmnwImnyYAwBx2Cvf
          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQDQYNaQ4QOuwACp8hBJXfEIgm74fG90Tju6Dx7dD4
Jmh8FTQ+mvsYVBzQ9KPx7dD4Lmh8TzS+Hyq/IRBNPgRNPswBAL8jJ2s=
          "]]}}, {{
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., -90.}, {-150., -90.}, {-120., -90.}, {-90., -90.}, \
{-60., -90.}, {-30., -90.}, {0., -90.}, {30., -90.}, {60., -90.}, {
          90., -90.}, {120., -90.}, {150., -90.}, {180., -90.}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., -80.}, {-150., -80.}, {-120., -80.}, {-90., -80.}, \
{-60., -80.}, {-30., -80.}, {0., -80.}, {30., -80.}, {60., -80.}, {
          90., -80.}, {120., -80.}, {150., -80.}, {180., -80.}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., -70.}, {-150., -70.}, {-120., -70.}, {-90., -70.}, \
{-60., -70.}, {-30., -70.}, {0., -70.}, {30., -70.}, {60., -70.}, {
          90., -70.}, {120., -70.}, {150., -70.}, {180., -70.}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., -60.}, {-150., -60.}, {-120., -60.}, {-90., -60.}, \
{-60., -60.}, {-30., -60.}, {0., -60.}, {30., -60.}, {60., -60.}, {
          90., -60.}, {120., -60.}, {150., -60.}, {180., -60.}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., -50.}, {-150., -50.}, {-120., -50.}, {-90., -50.}, \
{-60., -50.}, {-30., -50.}, {0., -50.}, {30., -50.}, {60., -50.}, {
          90., -50.}, {120., -50.}, {150., -50.}, {180., -50.}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., -40.}, {-150., -40.}, {-120., -40.}, {-90., -40.}, \
{-60., -40.}, {-30., -40.}, {0., -40.}, {30., -40.}, {60., -40.}, {
          90., -40.}, {120., -40.}, {150., -40.}, {180., -40.}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., -30.}, {-150., -30.}, {-120., -30.}, {-90., -30.}, \
{-60., -30.}, {-30., -30.}, {0., -30.}, {30., -30.}, {60., -30.}, {
          90., -30.}, {120., -30.}, {150., -30.}, {180., -30.}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., -20.}, {-150., -20.}, {-120., -20.}, {-90., -20.}, \
{-60., -20.}, {-30., -20.}, {0., -20.}, {30., -20.}, {60., -20.}, {
          90., -20.}, {120., -20.}, {150., -20.}, {180., -20.}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., -10.}, {-150., -10.}, {-120., -10.}, {-90., -10.}, \
{-60., -10.}, {-30., -10.}, {0., -10.}, {30., -10.}, {60., -10.}, {
          90., -10.}, {120., -10.}, {150., -10.}, {180., -10.}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., 0.}, {-150., 0.}, {-120., 0.}, {-90., 0.}, {-60., 
          0.}, {-30., 0.}, {0., 0.}, {30., 0.}, {60., 0.}, {90., 0.}, {120., 
          0.}, {150., 0.}, {180., 0.}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., 10.}, {-150., 10.}, {-120., 10.}, {-90., 10.}, {-60., 
          10.}, {-30., 10.}, {0., 10.}, {30., 10.}, {60., 10.}, {90., 10.}, {
          120., 10.}, {150., 10.}, {180., 10.}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., 20.}, {-150., 20.}, {-120., 20.}, {-90., 20.}, {-60., 
          20.}, {-30., 20.}, {0., 20.}, {30., 20.}, {60., 20.}, {90., 20.}, {
          120., 20.}, {150., 20.}, {180., 20.}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., 30.}, {-150., 30.}, {-120., 30.}, {-90., 30.}, {-60., 
          30.}, {-30., 30.}, {0., 30.}, {30., 30.}, {60., 30.}, {90., 30.}, {
          120., 30.}, {150., 30.}, {180., 30.}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., 40.}, {-150., 40.}, {-120., 40.}, {-90., 40.}, {-60., 
          40.}, {-30., 40.}, {0., 40.}, {30., 40.}, {60., 40.}, {90., 40.}, {
          120., 40.}, {150., 40.}, {180., 40.}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., 50.}, {-150., 50.}, {-120., 50.}, {-90., 50.}, {-60., 
          50.}, {-30., 50.}, {0., 50.}, {30., 50.}, {60., 50.}, {90., 50.}, {
          120., 50.}, {150., 50.}, {180., 50.}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., 60.}, {-150., 60.}, {-120., 60.}, {-90., 60.}, {-60., 
          60.}, {-30., 60.}, {0., 60.}, {30., 60.}, {60., 60.}, {90., 60.}, {
          120., 60.}, {150., 60.}, {180., 60.}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., 70.}, {-150., 70.}, {-120., 70.}, {-90., 70.}, {-60., 
          70.}, {-30., 70.}, {0., 70.}, {30., 70.}, {60., 70.}, {90., 70.}, {
          120., 70.}, {150., 70.}, {180., 70.}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., 80.}, {-150., 80.}, {-120., 80.}, {-90., 80.}, {-60., 
          80.}, {-30., 80.}, {0., 80.}, {30., 80.}, {60., 80.}, {90., 80.}, {
          120., 80.}, {150., 80.}, {180., 80.}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., 90.}, {-150., 90.}, {-120., 90.}, {-90., 90.}, {-60., 
          90.}, {-30., 90.}, {0., 90.}, {30., 90.}, {60., 90.}, {90., 90.}, {
          120., 90.}, {150., 90.}, {180., 90.}}]}}}, AspectRatio -> 0.8, 
      ImageSize -> 400, PlotRange -> {{-185, 185}, {-95, 95}}, LabelStyle -> 
      Directive[{Bold, 
         GrayLevel[0], Medium, FontFamily -> "Helvetica"}], Frame -> True, 
      FrameStyle -> Thickness[Large], Axes -> True, AxesStyle -> 
      Thickness[Large], 
      FrameTicks -> {{{{-90, -90}, {-60, -60}, {-30, -30}, {0, 0}, {30, 30}, {
         60, 60}, {90, 90}}, None}, {{-180, -150, -120, -90, -60, -30, 0, 30, 
         60, 90, 120, 150, 180}, None}}, 
      FrameLabel -> {"\[Phi] \(\[Degree])", "\[Theta] (\[Degree])"}], 
     Graphics[{{
        RGBColor[0.8518518518518519, 0.8518518518518519, 0.8518518518518519], 
        Polygon[CompressedData["
1:eJxTTMoPSmViYGBQA2IQDQYNaQcgdNgBGP/A8VNydRoI/o7jC9UWqoTC+S9E
47L9aoLh/IwjlXVZNoFwvnj9ktMv3/gcQDXfDc6/qPDoscoJOzi/UsrBcauj
Pqp6JPdB5R3Q9DugqG9wg/Oh9sP5UPfB+VD3w/lQ/8H5UP+jmQ/nO6Dz0dQ7
oJnngGafA5p7HNDc64DmHwc0/zqghYcDWng5oIWnA1p4w8yH89HiywEtPh3Q
4tsBLT04oKUXWPgcAAB0cquE
         "]]}, {{
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQDQYNaQcgdNgBGP/A8VNydRoI/o7jC9UWqoTC+S9E
47L9aoLh/IwjlXVZNoFwvnj9ktMv3/gcQDXfDc6/qPDoscoJOzi/UsrBcauj
Pqp6JPdB5R3Q9DugqG9wg/Oh9sP5UPfB+VD3w/lQ/8H5UP+jmR/mAAA5mltZ

          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQDQYHkg6A6YawAzD+geOn5Oo0EPwdxxeqLVQJhfNf
iMZl+9UEw/kZRyrrsmwC4Xzx+iWnX77xOYBqvhucf1Hh0WOVE3ZwfqWUg+NW
R31U9Ujug8o7oOl3QFHf4AbnQ+2H86Hug/Oh7ofzof6D86H+RzM/zAEA7EBf
zQ==
          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQDQFxB8BUQ9gBGP/A8VNydRoI/o7jC9UWqoTC+S9E
47L9aoLh/IwjlXVZNoFwvnj9ktMv3/jA+RDz3eD8iwqPHqucsIPzK6UcHLc6
6qOqR3IfVN4BTb8DivoGNzgfaj+cD3UfnA91P5wP9R+cD/U/mvlhDgAdUFFB

          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQDQYNYQfQ6QPHT8nVaSD4O44vVFuoEgrnvxCNy/ar
CYbzM45U1mXZBML54vVLTr9844Nmrhucf1Hh0WOVE3ZwfqWUg+NWR31U9Uju
g8o7oOl3QFHf4AbnQ+2H86Hug/Oh7ofzof6D86H+RzM/zAEAgqtaKQ==
          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQDQF+B8BUQ9gBGP/A8VNydRoI/o7jC9UWqoTC+S9E
47L9aoLh/IwjlXVZNoFwvnj9ktMv3/jA+RDz3eD8iwqPHqucsIPzK6UcHLc6
6qOqR3IfVN4BTb8DivoGNzgfaj+cD3UfnA91P5wP9R+cD/U/mvlhDgBmYVAR

          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQDQF2B8BUQ9gBGP/A8VNydRoI/o7jC9UWqoTC+S9E
47L9aoLh/IwjlXVZNoFwvnj9ktMv3/jA+RDz3eD8iwqPHqucsIPzK6UcHLc6
6qOqR3IfVN4BTb8DivoGNzgfaj+cD3UfnA91P5wP9R+cD/U/mvlhDgCvck7h

          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQjQIawg7AmAeOn5Kr00DwdxxfqLZQJRTOfyEal+1X
EwznZxyprMuyCYTzxeuXnH75xgfOh5jvBudfVHj0WOWEHZxfKeXguNVRH1U9
EoDKO6Dpd0BR1OAG50Pth/Oh7oPzoe6H86H+g/Oh/kczP8wBAGXpPAc=
          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQDQF2DmCqIewAjH/g+Cm5Og0Ef8fxhWoLVULh/Bei
cdl+NcFwfsaRyrosm0A4X7x+yemXb3zgfIj5bnD+RYVHj1VO2MH5lVIOjlsd
9VHVI7kPKu+Apt8BRX2DG5wPtR/Oh7oPzoe6H86H+g/Oh/ofzfwwBwABp0Vh

          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQDQF+DmCqIewAjH/g+Cm5Og0Ef8fxhWoLVULh/Bei
cdl+NcFwfsaRyrosm0A4X7x+yemXb3zgfIj5bnD+RYVHj1VO2MH5lVIOjlsd
9VHVI7kPKu+Apt8BRX2DG5wPtR/Oh7oPzoe6H86H+g/Oh/ofzfwwBwC4h0aR

          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQDQYNYQ5Q+gCMf+D4Kbk6DQR/x/GFagtVQuH8F6Jx
2X41wXB+xpHKuiybQDhfvH7J6ZdvfA6gmu8G519UePRY5YQdnF8p5eC41VEf
VT2S+6DyDmj6HVDUN7jB+VD74Xyo++B8qPvhfKj/4Hyo/9HMD3MAANTRUKk=

          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQDQFxDmCqIewAjH/g+Cm5Og0Ef8fxhWoLVULh/Bei
cdl+NcFwfsaRyrosm0A4X7x+yemXb3zgfIj5bnD+RYVHj1VO2MH5lVIOjlsd
9VHVI7kPKu+Apt8BRX2DG5wPtR/Oh7oPzoe6H86H+g/Oh/ofzfwwBwBvdkfB

          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQDQYHkhzAdEPYARj/wPFTcnUaCP6O4wvVFqqEwvkv
ROOy/WqC4fyMI5V1WTaBcL54/ZLTL9/4HEA13w3Ov6jw6LHKCTs4v1LKwXGr
oz6qeiT3QeUd0PQ7oKhvcIPzofbD+VD3wflQ98P5UP/B+VD/o5kf5gAAPnVW
TQ==
          "]]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAQBmIQDQYNaQ4QOuwAjH/g+Cm5Og0Ef8fxhWoLVULh/Bei
cdl+NcFwfsaRyrosm0A4X7x+yemXb3wOoJrvBudfVHj0WOWEHZxfKeXguNVR
H1U9kvug8g5o+h1Q1De4wflQ++F8qPvgfKj74Xyo/+B8qP/RzA9zAACLwFHZ

          "]]}}, {{
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., -90.}, {-150., -90.}, {-120., -90.}, {-90., -90.}, \
{-60., -90.}, {-30., -90.}, {0., -90.}, {30., -90.}, {60., -90.}, {
          90., -90.}, {120., -90.}, {150., -90.}, {180., -90.}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., -88.63269777109872}, {-150., -88.63269777109872}, \
{-120., -88.63269777109872}, {-90., -88.63269777109872}, {-60., \
-88.63269777109872}, {-30., -88.63269777109872}, {0., -88.63269777109872}, {
          30., -88.63269777109872}, {60., -88.63269777109872}, {
          90., -88.63269777109872}, {120., -88.63269777109872}, {
          150., -88.63269777109872}, {180., -88.63269777109872}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., -84.57233587073176}, {-150., -84.57233587073176}, \
{-120., -84.57233587073176}, {-90., -84.57233587073176}, {-60., \
-84.57233587073176}, {-30., -84.57233587073176}, {0., -84.57233587073176}, {
          30., -84.57233587073176}, {60., -84.57233587073176}, {
          90., -84.57233587073176}, {120., -84.57233587073176}, {
          150., -84.57233587073176}, {180., -84.57233587073176}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., -77.94228634059948}, {-150., -77.94228634059948}, \
{-120., -77.94228634059948}, {-90., -77.94228634059948}, {-60., \
-77.94228634059948}, {-30., -77.94228634059948}, {0., -77.94228634059948}, {
          30., -77.94228634059948}, {60., -77.94228634059948}, {
          90., -77.94228634059948}, {120., -77.94228634059948}, {
          150., -77.94228634059948}, {180., -77.94228634059948}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., -68.94399988070802}, {-150., -68.94399988070802}, \
{-120., -68.94399988070802}, {-90., -68.94399988070802}, {-60., \
-68.94399988070802}, {-30., -68.94399988070802}, {0., -68.94399988070802}, {
          30., -68.94399988070802}, {60., -68.94399988070802}, {
          90., -68.94399988070802}, {120., -68.94399988070802}, {
          150., -68.94399988070802}, {180., -68.94399988070802}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., -57.85088487178853}, {-150., -57.85088487178853}, \
{-120., -57.85088487178853}, {-90., -57.85088487178853}, {-60., \
-57.85088487178853}, {-30., -57.85088487178853}, {0., -57.85088487178853}, {
          30., -57.85088487178853}, {60., -57.85088487178853}, {
          90., -57.85088487178853}, {120., -57.85088487178853}, {
          150., -57.85088487178853}, {180., -57.85088487178853}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., -45.}, {-150., -45.}, {-120., -45.}, {-90., -45.}, \
{-60., -45.}, {-30., -45.}, {0., -45.}, {30., -45.}, {60., -45.}, {
          90., -45.}, {120., -45.}, {150., -45.}, {180., -45.}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., -30.781812899310186`}, {-150., -30.781812899310186`}, \
{-120., -30.781812899310186`}, {-90., -30.781812899310186`}, {-60., \
-30.781812899310186`}, {-30., -30.781812899310186`}, {
          0., -30.781812899310186`}, {30., -30.781812899310186`}, {
          60., -30.781812899310186`}, {90., -30.781812899310186`}, {
          120., -30.781812899310186`}, {150., -30.781812899310186`}, {
          180., -30.781812899310186`}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., -15.62833599002373}, {-150., -15.62833599002373}, \
{-120., -15.62833599002373}, {-90., -15.62833599002373}, {-60., \
-15.62833599002373}, {-30., -15.62833599002373}, {0., -15.62833599002373}, {
          30., -15.62833599002373}, {60., -15.62833599002373}, {
          90., -15.62833599002373}, {120., -15.62833599002373}, {
          150., -15.62833599002373}, {180., -15.62833599002373}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., 0.}, {-150., 0.}, {-120., 0.}, {-90., 0.}, {-60., 
          0.}, {-30., 0.}, {0., 0.}, {30., 0.}, {60., 0.}, {90., 0.}, {120., 
          0.}, {150., 0.}, {180., 0.}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., 15.62833599002373}, {-150., 15.62833599002373}, {-120.,
           15.62833599002373}, {-90., 15.62833599002373}, {-60., 
          15.62833599002373}, {-30., 15.62833599002373}, {0., 
          15.62833599002373}, {30., 15.62833599002373}, {60., 
          15.62833599002373}, {90., 15.62833599002373}, {120., 
          15.62833599002373}, {150., 15.62833599002373}, {180., 
          15.62833599002373}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., 30.781812899310186`}, {-150., 
          30.781812899310186`}, {-120., 30.781812899310186`}, {-90., 
          30.781812899310186`}, {-60., 30.781812899310186`}, {-30., 
          30.781812899310186`}, {0., 30.781812899310186`}, {30., 
          30.781812899310186`}, {60., 30.781812899310186`}, {90., 
          30.781812899310186`}, {120., 30.781812899310186`}, {150., 
          30.781812899310186`}, {180., 30.781812899310186`}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., 45.}, {-150., 45.}, {-120., 45.}, {-90., 45.}, {-60., 
          45.}, {-30., 45.}, {0., 45.}, {30., 45.}, {60., 45.}, {90., 45.}, {
          120., 45.}, {150., 45.}, {180., 45.}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., 57.85088487178853}, {-150., 57.85088487178853}, {-120.,
           57.85088487178853}, {-90., 57.85088487178853}, {-60., 
          57.85088487178853}, {-30., 57.85088487178853}, {0., 
          57.85088487178853}, {30., 57.85088487178853}, {60., 
          57.85088487178853}, {90., 57.85088487178853}, {120., 
          57.85088487178853}, {150., 57.85088487178853}, {180., 
          57.85088487178853}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., 68.94399988070802}, {-150., 68.94399988070802}, {-120.,
           68.94399988070802}, {-90., 68.94399988070802}, {-60., 
          68.94399988070802}, {-30., 68.94399988070802}, {0., 
          68.94399988070802}, {30., 68.94399988070802}, {60., 
          68.94399988070802}, {90., 68.94399988070802}, {120., 
          68.94399988070802}, {150., 68.94399988070802}, {180., 
          68.94399988070802}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., 77.94228634059948}, {-150., 77.94228634059948}, {-120.,
           77.94228634059948}, {-90., 77.94228634059948}, {-60., 
          77.94228634059948}, {-30., 77.94228634059948}, {0., 
          77.94228634059948}, {30., 77.94228634059948}, {60., 
          77.94228634059948}, {90., 77.94228634059948}, {120., 
          77.94228634059948}, {150., 77.94228634059948}, {180., 
          77.94228634059948}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., 84.57233587073176}, {-150., 84.57233587073176}, {-120.,
           84.57233587073176}, {-90., 84.57233587073176}, {-60., 
          84.57233587073176}, {-30., 84.57233587073176}, {0., 
          84.57233587073176}, {30., 84.57233587073176}, {60., 
          84.57233587073176}, {90., 84.57233587073176}, {120., 
          84.57233587073176}, {150., 84.57233587073176}, {180., 
          84.57233587073176}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., 88.63269777109872}, {-150., 88.63269777109872}, {-120.,
           88.63269777109872}, {-90., 88.63269777109872}, {-60., 
          88.63269777109872}, {-30., 88.63269777109872}, {0., 
          88.63269777109872}, {30., 88.63269777109872}, {60., 
          88.63269777109872}, {90., 88.63269777109872}, {120., 
          88.63269777109872}, {150., 88.63269777109872}, {180., 
          88.63269777109872}}]}, {
         RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
         Line[{{-180., 90.}, {-150., 90.}, {-120., 90.}, {-90., 90.}, {-60., 
          90.}, {-30., 90.}, {0., 90.}, {30., 90.}, {60., 90.}, {90., 90.}, {
          120., 90.}, {150., 90.}, {180., 90.}}]}}}, AspectRatio -> 0.8, 
      ImageSize -> 400, PlotRange -> {{-185, 185}, {-95, 95}}, LabelStyle -> 
      Directive[{Bold, 
         GrayLevel[0], Medium, FontFamily -> "Helvetica"}], Frame -> True, 
      FrameStyle -> Thickness[Large], Axes -> True, AxesStyle -> 
      Thickness[Large], 
      FrameTicks -> {{{{-90, -90}, {-78, -60}, {-45, -30}, {0, 0}, {45, 30}, {
         78, 60}, {90, 90}}, None}, {{-180, -150, -120, -90, -60, -30, 0, 30, 
         60, 90, 120, 150, 180}, None}}, 
      FrameLabel -> {
       "\[Phi] (\[Degree])", "\[Theta] Sin[\[Theta]] (\[Degree])"}]}, 
    QMRITools`GradientTools`Private`ctype$$ = 1, 
    QMRITools`GradientTools`Private`dirs1$$ = 30, 
    QMRITools`GradientTools`Private`dirs2$$ = {15, 15}, 
    QMRITools`GradientTools`Private`dirs21$$ = 15, 
    QMRITools`GradientTools`Private`dirs22$$ = 15, 
    QMRITools`GradientTools`Private`dirs23$$ = 15, 
    QMRITools`GradientTools`Private`dirs24$$ = 15, 
    QMRITools`GradientTools`Private`dirs25$$ = 15, 
    QMRITools`GradientTools`Private`dirs26$$ = 15, 
    QMRITools`GradientTools`Private`disp$$ = 1, 
    QMRITools`GradientTools`Private`file$$ = "", 
    QMRITools`GradientTools`Private`gradc$$ = "", 
    QMRITools`GradientTools`Private`gradd$$ = "", 
    QMRITools`GradientTools`Private`gradm$$ = "", 
    QMRITools`GradientTools`Private`grads$$ = "", 
    QMRITools`GradientTools`Private`grid$$ = 9, 
    QMRITools`GradientTools`Private`gridf$$ = False, 
    QMRITools`GradientTools`Private`half$$ = 1, 
    QMRITools`GradientTools`Private`inter$$ = True, 
    QMRITools`GradientTools`Private`len$$ = Null, 
    QMRITools`GradientTools`Private`mirror$$ = True, 
    QMRITools`GradientTools`Private`mpoints$$ = {}, 
    QMRITools`GradientTools`Private`mult$$ = 1, 
    QMRITools`GradientTools`Private`names$$ = {
    "Set_Name", "Shells_Name", "Grid_Name", "DWI_Name"}, 
    QMRITools`GradientTools`Private`nshels$$ = 2, 
    QMRITools`GradientTools`Private`opacity$$ = 0.5, 
    QMRITools`GradientTools`Private`orderc$$ = "", 
    QMRITools`GradientTools`Private`orderd$$ = "", 
    QMRITools`GradientTools`Private`orderm$$ = "", 
    QMRITools`GradientTools`Private`orders$$ = "", 
    QMRITools`GradientTools`Private`out$$ = "Set_Name", 
    QMRITools`GradientTools`Private`outc$$ = "", 
    QMRITools`GradientTools`Private`outd$$ = "", 
    QMRITools`GradientTools`Private`outm$$ = "", 
    QMRITools`GradientTools`Private`outs$$ = "", 
    QMRITools`GradientTools`Private`part$$ = 1, 
    QMRITools`GradientTools`Private`points$$ = {}, 
    QMRITools`GradientTools`Private`pointsc$$ = {}, 
    QMRITools`GradientTools`Private`pointspl$$ = {}, 
    QMRITools`GradientTools`Private`ppoints$$ = {}, 
    QMRITools`GradientTools`Private`ppointspl$$ = {}, 
    QMRITools`GradientTools`Private`proj$$ = False, 
    QMRITools`GradientTools`Private`random$$ = True, 
    QMRITools`GradientTools`Private`rlen$$ = Null, 
    QMRITools`GradientTools`Private`rlenc$$ = {}, 
    QMRITools`GradientTools`Private`running$$ = False, 
    QMRITools`GradientTools`Private`sc$$ = Null, 
    QMRITools`GradientTools`Private`scc$$ = Null, 
    QMRITools`GradientTools`Private`shel$$ = 1, 
    QMRITools`GradientTools`Private`show$$ = {1, 2}, 
    QMRITools`GradientTools`Private`showc$$ = All, 
    QMRITools`GradientTools`Private`size$$ = 430, 
    QMRITools`GradientTools`Private`steps$$ = 1000, 
    QMRITools`GradientTools`Private`sticks$$ = False, 
    QMRITools`GradientTools`Private`type$$ = "normal", 
    QMRITools`GradientTools`Private`typed$$ = "normal", 
    QMRITools`GradientTools`Private`va$$ = 0.5235987755982988, 
    QMRITools`GradientTools`Private`vel$$ = 1, 
    QMRITools`GradientTools`Private`viewvec$$ = {0, 0}, 
    QMRITools`GradientTools`Private`vp$$ = {1.3, -2.4, 2}, 
    QMRITools`GradientTools`Private`vv$$ = {0, 0, 1}, 
    QMRITools`GradientTools`Private`weight$$ = 0.5, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       Row[{"  Set Name ", 
         InputField[
          Dynamic[
           Part[
           QMRITools`GradientTools`Private`names$$, 
            QMRITools`GradientTools`Private`mult$$]], String]}]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[QMRITools`GradientTools`Private`disp$$], 1, 
       "display gradients"}, {
      1 -> "graphics", 2 -> "chart", 3 -> "text", 4 -> "G load"}}, {{
       Hold[QMRITools`GradientTools`Private`opacity$$], 0.5, 
       "sphere opacity"}, 0, 1, 0.1}, {
      Hold[
       Row[{" sticks: ", 
         Checkbox[
          Dynamic[QMRITools`GradientTools`Private`sticks$$]], 
         "   mirror grad.: ", 
         Checkbox[
          Dynamic[QMRITools`GradientTools`Private`mirror$$]], 
         "   project grad. on half: ", 
         Checkbox[
          Dynamic[QMRITools`GradientTools`Private`proj$$]]}]], 
      Manipulate`Dump`ThisIsNotAControl}, {
      Hold[
       Grid[{{
          Button[
          "top", QMRITools`GradientTools`Private`vp$$ = {0, 0, 3.38}, 
           ImageSize -> {50, 20}, FrameMargins -> 0, FontSize -> 10], 
          Button[
          "right", QMRITools`GradientTools`Private`vp$$ = {3.38, 0, 0}, 
           ImageSize -> {50, 20}, FrameMargins -> 0, FontSize -> 10], 
          Button[
          "front", QMRITools`GradientTools`Private`vp$$ = {0, 3.38, 0}, 
           ImageSize -> {50, 20}, FrameMargins -> 0, FontSize -> 10], 
          Button[
          "reset", {
            QMRITools`GradientTools`Private`vp$$, 
             QMRITools`GradientTools`Private`vv$$, 
             QMRITools`GradientTools`Private`va$$} = {{1.3, -2.4, 2}, {0, 0, 
             1}, 30. Degree}, ImageSize -> {100, 20}, FrameMargins -> 0, 
           FontSize -> 10]}}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[QMRITools`GradientTools`Private`half$$], 1, 
       "Full or half sphere"}, {1 -> "half sphere", 0 -> "full sphere"}}, {{
       Hold[QMRITools`GradientTools`Private`mult$$], 1, "shells"}, {
      1 -> "single shell", 2 -> "multi shell", 3 -> "cartesian", 4 -> 
       "DWI"}}, {{
       Hold[QMRITools`GradientTools`Private`type$$], "normal", "type"}, {
      "normal", "normal fixed z", "normal fixed x, y and z", "over-plus", 
       "over-plus fixed z", "over-plus fixed x, y and z"}}, {{
       Hold[QMRITools`GradientTools`Private`dirs1$$], 30, 
       "number of gradients"}, 6, 128, 1}, {{
       Hold[QMRITools`GradientTools`Private`nshels$$], 2, 
       "number of shells"}, {2, 3, 4, 5, 6}}, {{
       Hold[QMRITools`GradientTools`Private`shel$$], 1, " shell"}, 
      Dynamic[
       Range[QMRITools`GradientTools`Private`nshels$$]]}, {{
       Hold[QMRITools`GradientTools`Private`dirs21$$], 15, 
       "number of gradients shell 1"}, 3, 128, 1}, {{
       Hold[QMRITools`GradientTools`Private`dirs22$$], 15, 
       "number of gradients shell 2"}, 3, 128, 1}, {{
       Hold[QMRITools`GradientTools`Private`dirs23$$], 15, 
       "number of gradients shell 3"}, 3, 128, 1}, {{
       Hold[QMRITools`GradientTools`Private`dirs24$$], 15, 
       "number of gradients shell 4"}, 3, 128, 1}, {{
       Hold[QMRITools`GradientTools`Private`dirs25$$], 15, 
       "number of gradients shell 5"}, 3, 128, 1}, {{
       Hold[QMRITools`GradientTools`Private`dirs26$$], 15, 
       "number of gradients shell 6"}, 3, 128, 1}, {{
       Hold[QMRITools`GradientTools`Private`weight$$], 0.5, 
       "shell weighting"}, 0, 1, 0.05}, {{
       Hold[QMRITools`GradientTools`Private`grid$$], 9, 
       "cartesian grid size"}, 5, 15, 1}, {{
       Hold[QMRITools`GradientTools`Private`gridf$$], True, 
       "full even grid"}, {
      False -> "no (in between odd grid)", True -> "yes"}}, {{
       Hold[QMRITools`GradientTools`Private`typed$$], "normal", 
       "           type"}, {"normal", "over-plus"}}, {
      Hold[
       PaneSelector[{1 -> Column[{
            Manipulate`Place[1], 
            Manipulate`Place[2]}], 2 -> Column[{
            Row[{
              Manipulate`Place[3], 
              Manipulate`Place[4]}], 
            PaneSelector[{
              Manipulate`Place[5], 
              Manipulate`Place[6], 
              Manipulate`Place[7], 
              Manipulate`Place[8], 
              Manipulate`Place[9], 
              Manipulate`Place[10]}, 
             Dynamic[QMRITools`GradientTools`Private`shel$$]], 
            Manipulate`Place[11]}], 3 -> Column[{
            Manipulate`Place[12], 
            Manipulate`Place[13]}], 4 -> Manipulate`Place[14]}, 
        Dynamic[QMRITools`GradientTools`Private`mult$$]]], 
      Manipulate`Dump`ThisIsNotAControl}, {
      Hold[
       PaneSelector[{1 -> Row[{"  b-value:   ", 
            InputField[
             Dynamic[QMRITools`GradientTools`Private`bvall$$], Expression, 
             Background -> Dynamic[
               If[
                Or[
                 And[
                  AllTrue[QMRITools`GradientTools`Private`bvall$$, NumberQ], 
                  ListQ[QMRITools`GradientTools`Private`bvall$$]], 
                 NumberQ[QMRITools`GradientTools`Private`bvall$$]], None, 
                Lighter[
                 Lighter[Red]]]]]}], 2 -> Dynamic[
           Grid[
            Partition[
             PadRight[
              Map[Row[{"b-val" <> ToString[#] <> ":", 
                 InputField[
                  Dynamic[
                   Part[QMRITools`GradientTools`Private`bvals$$, #]], Number, 
                  FieldSize -> 5]}]& , 
               Range[1, QMRITools`GradientTools`Private`nshels$$]], 6, ""], 
             3]]], 3 -> Row[{"max b (corner):   ", 
            InputField[
             Dynamic[QMRITools`GradientTools`Private`bvalc$$], Number]}], 4 -> 
         Row[{"      b-value:   ", 
            InputField[
             Dynamic[QMRITools`GradientTools`Private`bvald$$], Expression, 
             Background -> Dynamic[
               If[
                Or[
                 And[
                  AllTrue[QMRITools`GradientTools`Private`bvald$$, NumberQ], 
                  ListQ[QMRITools`GradientTools`Private`bvald$$]], 
                 NumberQ[QMRITools`GradientTools`Private`bvald$$]], None, 
                Lighter[
                 Lighter[Red]]]]]}]}, 
        Dynamic[QMRITools`GradientTools`Private`mult$$]]], 
      Manipulate`Dump`ThisIsNotAControl}, {
      Hold[
       Dynamic[
        Grid[{{"  interleave b: ", 
           Checkbox[
            Dynamic[QMRITools`GradientTools`Private`inter$$]], 
           "Optimize G load: ", 
           Checkbox[
            Dynamic[QMRITools`GradientTools`Private`random$$]]}, 
          If[
          QMRITools`GradientTools`Private`inter$$, {"  interleave b-value: ", 
            InputField[
             Dynamic[QMRITools`GradientTools`Private`bi$$], Number, FieldSize -> 
             3], "interleave b every: ", 
            PopupMenu[
             Dynamic[QMRITools`GradientTools`Private`int], 
             Range[3, 20]]}, {}]}, Alignment -> Left]]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[QMRITools`GradientTools`Private`steps$$], 1000, 
       "quality (iterations)"}, {
      500 -> "poor (500)", 1000 -> "normal (1000)", 2500 -> 
       "excellent (2500)", 5000 -> "perfect (5000)", 10000 -> 
       "extreme (10000)"}}, {
      Hold[
       Row[{
         Button["generate", QMRITools`GradientTools`Private`app$$ = Lighter[
             Lighter[LightGray]]; QMRITools`GradientTools`Private`disp$$ = 1; 
          QMRITools`GradientTools`Private`running$$ = True; 
          QMRITools`GradientTools`Private`mirror$$ = 
           If[QMRITools`GradientTools`Private`half$$ == 0, False, True]; 
          QMRITools`GradientTools`Private`proj$$ = False; Pause[0.2]; 
          Switch[QMRITools`GradientTools`Private`mult$$, 4, 
            QMRITools`GradientTools`Private`gradd$$ = 
             If[QMRITools`GradientTools`Private`typed$$ == "normal", {{1, 0, 
               0}, {0, 1, 0}, {0, 0, 1}}, {{-0.707107, -0.5, 0.5}, {
               0.707107, -0.5, 0.5}, {0., 0.707107, 0.707107}}]; Null, 3, 
            QMRITools`GradientTools`Private`gradc$$ = (
              QMRITools`GradientTools`Private`pointsc$$ = 
              QMRITools`GradientTools`Private`GradGrid[
               QMRITools`GradientTools`Private`grid$$, 
                QMRITools`GradientTools`Private`gridf$$]); Null, 
            2, {QMRITools`GradientTools`Private`mpoints$$, 
               QMRITools`GradientTools`Private`vel$$, 
               QMRITools`GradientTools`Private`part$$} = 
             QMRITools`GradientTools`Private`Prepare[
              QMRITools`GradientTools`Private`dirs2$$, 
               QMRITools`GradientTools`Private`half$$, {}, 
               QMRITools`GradientTools`Private`weight$$]; Pause[0.5]; 
            Do[QMRITools`GradientTools`Private`mpoints$$ = 
               QMRITools`GradientTools`Private`GradOptimize4C[
                QMRITools`GradientTools`Private`mpoints$$, 
                 QMRITools`GradientTools`Private`vel$$, 
                 QMRITools`GradientTools`Private`half$$]; 
              QMRITools`GradientTools`Private`ppoints$$ = Map[Chop[
                  Part[QMRITools`GradientTools`Private`mpoints$$, #]]& , 
                 QMRITools`GradientTools`Private`part$$]; Null, {
              QMRITools`GradientTools`Private`steps$$}]; 
            QMRITools`GradientTools`Private`gradm$$ = Map[Chop[
                Part[QMRITools`GradientTools`Private`mpoints$$, #]]& , 
               QMRITools`GradientTools`Private`part$$]; Null, 1, 
            QMRITools`GradientTools`Private`grads$$ = 
             Switch[QMRITools`GradientTools`Private`type$$, "normal", 
               QMRITools`GradientTools`Private`points$$ = 
                QMRITools`GradientTools`Private`Prepare[{
                  QMRITools`GradientTools`Private`dirs1$$}, 
                  QMRITools`GradientTools`Private`half$$]; Pause[0.5]; 
               Do[QMRITools`GradientTools`Private`points$$ = 
                 QMRITools`GradientTools`Private`GradOptimize1C[
                  QMRITools`GradientTools`Private`points$$, 
                   QMRITools`GradientTools`Private`half$$], {
                 QMRITools`GradientTools`Private`steps$$}]; 
               Chop[QMRITools`GradientTools`Private`points$$], 
               "normal fixed z", 
               QMRITools`GradientTools`Private`points$$ = 
                QMRITools`GradientTools`Private`Prepare[{
                  QMRITools`GradientTools`Private`dirs1$$}, 
                  QMRITools`GradientTools`Private`half$$, {{0, 0, 1}}]; 
               Pause[0.5]; 
               Do[QMRITools`GradientTools`Private`points$$ = 
                 QMRITools`GradientTools`Private`GradOptimize2C[
                  QMRITools`GradientTools`Private`points$$, 1, 
                   QMRITools`GradientTools`Private`half$$], {
                 QMRITools`GradientTools`Private`steps$$}]; 
               Chop[QMRITools`GradientTools`Private`points$$], 
               "normal fixed x, y and z", 
               QMRITools`GradientTools`Private`points$$ = 
                QMRITools`GradientTools`Private`Prepare[{
                  QMRITools`GradientTools`Private`dirs1$$}, 
                  QMRITools`GradientTools`Private`half$$, {{1, 0, 0}, {0, 1, 
                  0}, {0, 0, 1}}]; Pause[0.5]; 
               Do[QMRITools`GradientTools`Private`points$$ = 
                 QMRITools`GradientTools`Private`GradOptimize2C[
                  QMRITools`GradientTools`Private`points$$, 3, 
                   QMRITools`GradientTools`Private`half$$], {
                 QMRITools`GradientTools`Private`steps$$}]; 
               Chop[QMRITools`GradientTools`Private`points$$], "over-plus", 
               QMRITools`GradientTools`Private`half$$ = 1; 
               QMRITools`GradientTools`Private`points$$ = 
                QMRITools`GradientTools`Private`Prepare[{
                  QMRITools`GradientTools`Private`dirs1$$}, 
                  QMRITools`GradientTools`Private`half$$]; 
               QMRITools`GradientTools`Private`points$$ = 
                Join[{{0, 0, 1}, {0, 1, 0}, {1, 0, 0}}, 
                  QMRITools`GradientTools`Private`points$$]; Pause[0.5]; 
               Do[QMRITools`GradientTools`Private`points$$ = 
                 QMRITools`GradientTools`Private`GradOptimize2C[
                  QMRITools`GradientTools`Private`points$$, 3, 
                   QMRITools`GradientTools`Private`half$$], {
                  Round[QMRITools`GradientTools`Private`steps$$/10]}]; 
               QMRITools`GradientTools`Private`charge$$ = Join[
                  
                  ConstantArray[(0.5 
                    QMRITools`GradientTools`Private`dirs1$$)^1.2, 3], 
                  ConstantArray[1, QMRITools`GradientTools`Private`dirs1$$]]; 
               Do[QMRITools`GradientTools`Private`points$$ = 
                 QMRITools`GradientTools`Private`GradOptimize3C[
                  QMRITools`GradientTools`Private`points$$, 
                   QMRITools`GradientTools`Private`charge$$, 3], {
                 QMRITools`GradientTools`Private`steps$$}]; 
               QMRITools`GradientTools`Private`points$$ = Chop[
                  Drop[QMRITools`GradientTools`Private`points$$, 3]], 
               "over-plus fixed z", 
               QMRITools`GradientTools`Private`half$$ = 1; 
               QMRITools`GradientTools`Private`points$$ = 
                QMRITools`GradientTools`Private`Prepare[{
                  QMRITools`GradientTools`Private`dirs1$$ - 1}, 
                  QMRITools`GradientTools`Private`half$$]; 
               QMRITools`GradientTools`Private`points$$ = 
                Join[{{0, 0, 1}, {0, 1, 0}, {1, 0, 0}, {0., 0.707107, 
                   0.707107}}, QMRITools`GradientTools`Private`points$$]; 
               Pause[0.5]; 
               Do[QMRITools`GradientTools`Private`points$$ = 
                 QMRITools`GradientTools`Private`GradOptimize2C[
                  QMRITools`GradientTools`Private`points$$, 4, 
                   QMRITools`GradientTools`Private`half$$], {
                  Round[QMRITools`GradientTools`Private`steps$$/10]}]; 
               QMRITools`GradientTools`Private`charge$$ = Join[
                  
                  ConstantArray[(0.5 
                    QMRITools`GradientTools`Private`dirs1$$)^1.2, 3], 
                  ConstantArray[1, QMRITools`GradientTools`Private`dirs1$$]]; 
               Do[QMRITools`GradientTools`Private`points$$ = 
                 QMRITools`GradientTools`Private`GradOptimize3C[
                  QMRITools`GradientTools`Private`points$$, 
                   QMRITools`GradientTools`Private`charge$$, 4], {
                 QMRITools`GradientTools`Private`steps$$}]; 
               QMRITools`GradientTools`Private`points$$ = Chop[
                  Drop[QMRITools`GradientTools`Private`points$$, 3]], 
               "over-plus fixed x, y and z", 
               QMRITools`GradientTools`Private`half$$ = 1; 
               QMRITools`GradientTools`Private`points$$ = 
                QMRITools`GradientTools`Private`Prepare[{
                  QMRITools`GradientTools`Private`dirs1$$ - 3}, 
                  QMRITools`GradientTools`Private`half$$]; 
               QMRITools`GradientTools`Private`points$$ = 
                Join[{{0, 0, 1}, {0, 1, 0}, {1, 0, 0}, {-0.707107, -0.5, 
                   0.5}, {0.707107, -0.5, 0.5}, {0., 0.707107, 0.707107}}, 
                  QMRITools`GradientTools`Private`points$$]; Pause[0.5]; 
               Do[QMRITools`GradientTools`Private`points$$ = 
                 QMRITools`GradientTools`Private`GradOptimize2C[
                  QMRITools`GradientTools`Private`points$$, 6, 
                   QMRITools`GradientTools`Private`half$$], {
                  Round[QMRITools`GradientTools`Private`steps$$/10]}]; 
               QMRITools`GradientTools`Private`charge$$ = Join[
                  
                  ConstantArray[(0.5 
                    QMRITools`GradientTools`Private`dirs1$$)^1.2, 3], 
                  ConstantArray[1, QMRITools`GradientTools`Private`dirs1$$]]; 
               Do[QMRITools`GradientTools`Private`points$$ = 
                 QMRITools`GradientTools`Private`GradOptimize3C[
                  QMRITools`GradientTools`Private`points$$, 
                   QMRITools`GradientTools`Private`charge$$, 6], {
                 QMRITools`GradientTools`Private`steps$$}]; 
               QMRITools`GradientTools`Private`points$$ = Chop[
                  Drop[QMRITools`GradientTools`Private`points$$, 3]]]; Null]; 
          Switch[QMRITools`GradientTools`Private`mult$$, 1, 
            QMRITools`GradientTools`Private`outs$$ = 
             QMRITools`GradientTools`ConvertGrads[
               ConstantArray[QMRITools`GradientTools`Private`grads$$, 
                Length[QMRITools`GradientTools`Private`bvall$$]], 
               QMRITools`GradientTools`Private`bvall$$, 
               QMRITools`GradientTools`Private`bi$$]; 
            QMRITools`GradientTools`Private`orders$$ = 
             QMRITools`GradientTools`FindOrder[
               ConstantArray[QMRITools`GradientTools`Private`grads$$, 
                Length[QMRITools`GradientTools`Private`bvall$$]], 
               QMRITools`GradientTools`Private`bvall$$]; Null, 2, 
            QMRITools`GradientTools`Private`outm$$ = 
             QMRITools`GradientTools`ConvertGrads[
              QMRITools`GradientTools`Private`gradm$$, 
               Part[QMRITools`GradientTools`Private`bvals$$, 
                Span[1, QMRITools`GradientTools`Private`nshels$$]], 
               QMRITools`GradientTools`Private`bi$$]; 
            QMRITools`GradientTools`Private`orderm$$ = 
             QMRITools`GradientTools`FindOrder[
              QMRITools`GradientTools`Private`gradm$$, 
               Part[QMRITools`GradientTools`Private`bvals$$, 
                Span[1, QMRITools`GradientTools`Private`nshels$$]]]; Null, 3, 
            QMRITools`GradientTools`Private`outc$$ = 
             QMRITools`GradientTools`ConvertGrads[
              QMRITools`GradientTools`Private`gradc$$, {
               QMRITools`GradientTools`Private`bvalc$$}, 
               QMRITools`GradientTools`Private`bi$$]; 
            QMRITools`GradientTools`Private`orderc$$ = 
             QMRITools`GradientTools`FindOrder[
              QMRITools`GradientTools`Private`gradc$$, 
               QMRITools`GradientTools`Private`bvalc$$]; Null, 4, 
            QMRITools`GradientTools`Private`outd$$ = 
             QMRITools`GradientTools`ConvertGrads[
               ConstantArray[QMRITools`GradientTools`Private`gradd$$, 
                Length[QMRITools`GradientTools`Private`bvald$$]], 
               QMRITools`GradientTools`Private`bvald$$, 
               QMRITools`GradientTools`Private`bi$$]; 
            Part[QMRITools`GradientTools`Private`outd$$, 2] = Join[
               If[
               QMRITools`GradientTools`Private`typed$$ == "normal", {
                " 1.00000    0.00000    0.00000       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 " 0.00000    1.00000    0.00000       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 " 0.00000    0.00000    1.00000       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]]}, {
                "-0.70711   -0.50000    0.50000       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 " 0.70711   -0.50000    0.50000       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 " 0.00000    0.70711    0.70711       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]]}], {
               " 0.02704    0.79706    0.60330       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                "-0.09999   -0.59783    0.79536       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                " 0.23191   -0.77261    0.59101       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                " 0.52867   -0.79903    0.28646       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                "-0.18297   -0.98140    0.05818       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                "-0.86286    0.19578    0.46599       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                " 0.05126    0.20181    0.97808       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                "-0.66047    0.01890    0.75062       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                " 0.65426   -0.18818    0.73249       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                "-0.33052    0.11752    0.93646       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                "-0.95407   -0.14465    0.26236       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                "-0.14402   -0.86963    0.47224       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                "-0.78028   -0.56460    0.26904       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                "-0.75319   -0.31631    0.57675       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                "-0.41392   -0.31357    0.85460       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                " 0.56536    0.27275    0.77845       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                "-0.73743    0.58153    0.34354       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                " 0.29639   -0.44648    0.84428       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                "-0.38689    0.75986    0.52243       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                "-0.20081    0.52214    0.82888       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                " 0.79424   -0.60284    0.07593       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                " 0.98777    0.03678    0.15153       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                " 0.29973    0.90469    0.30281       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                "-0.95633    0.27860    0.08835       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                "-0.49976   -0.83556    0.22819       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                " 0.90574    0.41773    0.07170       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                " 0.77284    0.45698    0.44032       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                " 0.35339   -0.03796    0.93471       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                " 0.84918    0.07921    0.52213       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                "-0.50085    0.85590    0.12880       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                " 0.47526    0.67317    0.56654       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                " 0.87597   -0.32192    0.35923       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                " 0.64492    0.75075    0.14303       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                "-0.12687    0.96109    0.24536       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                " 0.60869   -0.54852    0.57325       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                "-0.03797   -0.21873    0.97505       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                "-0.47780   -0.64010    0.60165       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                "-0.57319    0.42677    0.69952       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                " 0.18760   -0.96394    0.18874       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                " 0.23342    0.50887    0.28591       " <> ToString[
                  Round[QMRITools`GradientTools`Private`bi$$, 0.1]]}]; 
            QMRITools`GradientTools`Private`orderd$$ = 
             QMRITools`GradientTools`FindOrder[
               ConstantArray[QMRITools`GradientTools`Private`gradd$$, 
                Length[QMRITools`GradientTools`Private`bvald$$]], 
               QMRITools`GradientTools`Private`bvald$$]; Null]; Pause[0.1]; 
          QMRITools`GradientTools`Private`running$$ = False; 
          QMRITools`GradientTools`Private`app$$ = White; Null, Method -> 
          "Queued", ImageSize -> {120, 23}, FontSize -> 10], 
         Button["clipboard", 
          CopyToClipboard[QMRITools`GradientTools`Private`out$$], 
          ImageSize -> {100, 23}, FontSize -> 10], 
         Button[
         "file", QMRITools`GradientTools`Private`file$$ = 
           SystemDialogInput["FileSave", "dti_vectors_input.txt"]; If[
            Not[QMRITools`GradientTools`Private`file$$ === $Canceled], 
            Export[
            QMRITools`GradientTools`Private`file$$, 
             QMRITools`GradientTools`Private`out$$, "Text"]], 
          ImageSize -> {100, 23}, Method -> "Queued", FontSize -> 10]}]], 
      Manipulate`Dump`ThisIsNotAControl}, {
      Hold[
       Row[{
         Style[
         "Made by Martijn Froeling, Phd \nm.froeling@umcutrecht.nl", {Small, 
           GrayLevel[0.5]}]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[QMRITools`GradientTools`Private`points$$], {}}}, {{
       Hold[QMRITools`GradientTools`Private`pointspl$$], {}}}, {{
       Hold[QMRITools`GradientTools`Private`pointsc$$], {}}}, {{
       Hold[QMRITools`GradientTools`Private`ppoints$$], {}}}, {{
       Hold[QMRITools`GradientTools`Private`ppointspl$$], {}}}, {{
       Hold[QMRITools`GradientTools`Private`mpoints$$], {}}}, {{
       Hold[QMRITools`GradientTools`Private`gradd$$], ""}}, {{
       Hold[QMRITools`GradientTools`Private`gradm$$], ""}}, {{
       Hold[QMRITools`GradientTools`Private`grads$$], ""}}, {{
       Hold[QMRITools`GradientTools`Private`gradc$$], ""}}, {{
       Hold[QMRITools`GradientTools`Private`outd$$], ""}}, {{
       Hold[QMRITools`GradientTools`Private`outc$$], ""}}, {{
       Hold[QMRITools`GradientTools`Private`outm$$], ""}}, {{
       Hold[QMRITools`GradientTools`Private`outs$$], ""}}, {{
       Hold[QMRITools`GradientTools`Private`orderd$$], ""}}, {{
       Hold[QMRITools`GradientTools`Private`orderc$$], ""}}, {{
       Hold[QMRITools`GradientTools`Private`orderm$$], ""}}, {{
       Hold[QMRITools`GradientTools`Private`orders$$], ""}}, {{
       Hold[QMRITools`GradientTools`Private`out$$], ""}}, {{
       Hold[QMRITools`GradientTools`Private`file$$], ""}}, {{
       Hold[QMRITools`GradientTools`Private`show$$], {1, 2}}}, {{
       Hold[QMRITools`GradientTools`Private`showc$$], All}}, {{
       Hold[QMRITools`GradientTools`Private`weight$$], 0.5}}, {{
       Hold[QMRITools`GradientTools`Private`grid$$], 9}}, {{
       Hold[QMRITools`GradientTools`Private`gridf$$], False}}, {{
       Hold[QMRITools`GradientTools`Private`running$$], False}}, {{
       Hold[QMRITools`GradientTools`Private`app$$], 
       GrayLevel[1]}}, {{
       Hold[QMRITools`GradientTools`Private`size$$], 430}}, {{
       Hold[QMRITools`GradientTools`Private`inter$$], True}}, {{
       Hold[QMRITools`GradientTools`Private`bi$$], 0}}, {{
       Hold[QMRITools`GradientTools`Private`random$$], True}}, {{
       Hold[QMRITools`GradientTools`Private`sticks$$], False}}, {{
       Hold[QMRITools`GradientTools`Private`mirror$$], True}}, {{
       Hold[QMRITools`GradientTools`Private`proj$$], False}}, {{
       Hold[QMRITools`GradientTools`Private`vel$$], 1}}, {{
       Hold[QMRITools`GradientTools`Private`part$$], 1}}, {{
       Hold[QMRITools`GradientTools`Private`dirs1$$], 30}}, {{
       Hold[QMRITools`GradientTools`Private`dirs21$$], 15}}, {{
       Hold[QMRITools`GradientTools`Private`dirs22$$], 15}}, {{
       Hold[QMRITools`GradientTools`Private`dirs23$$], 15}}, {{
       Hold[QMRITools`GradientTools`Private`dirs24$$], 15}}, {{
       Hold[QMRITools`GradientTools`Private`dirs25$$], 15}}, {{
       Hold[QMRITools`GradientTools`Private`dirs26$$], 15}}, {{
       Hold[QMRITools`GradientTools`Private`bvald$$], {10, 20, 30, 40, 60, 80,
        100, 200, 300, 500, 700, 1000}}}, {{
       Hold[QMRITools`GradientTools`Private`bvall$$], {1000}}}, {{
       Hold[QMRITools`GradientTools`Private`bvals$$], {1000, 2000, 3000, 4000,
        5000, 6000}}}, {{
       Hold[QMRITools`GradientTools`Private`bvalc$$], 9000}}, {
      Hold[QMRITools`GradientTools`Private`dirs2$$]}, {
      Hold[QMRITools`GradientTools`Private`type$$]}, {
      Hold[QMRITools`GradientTools`Private`typed$$]}, {
      Hold[QMRITools`GradientTools`Private`sc$$]}, {
      Hold[QMRITools`GradientTools`Private`scc$$]}, {
      Hold[QMRITools`GradientTools`Private`shel$$]}, {{
       Hold[QMRITools`GradientTools`Private`nshels$$], 2}}, {
      Hold[QMRITools`GradientTools`Private`len$$]}, {
      Hold[QMRITools`GradientTools`Private`rlen$$]}, {{
       Hold[QMRITools`GradientTools`Private`rlenc$$], {}}}, {
      Hold[QMRITools`GradientTools`Private`charge$$]}, {{
       Hold[QMRITools`GradientTools`Private`names$$], {
       "Set_Name", "Shells_Name", "Grid_Name", "DWI_Name"}}}, {{
       Hold[QMRITools`GradientTools`Private`vp$$], {1.3, -2.4, 2}}}, {{
       Hold[QMRITools`GradientTools`Private`va$$], 0.5235987755982988}}, {{
       Hold[QMRITools`GradientTools`Private`vv$$], {0, 0, 1}}}, {
      Hold[QMRITools`GradientTools`Private`charts$$]}, {{
       Hold[QMRITools`GradientTools`Private`viewvec$$], {0, 0}}}, {{
       Hold[QMRITools`GradientTools`Private`ctype$$], 1}}}, Typeset`size$$ = {
    430., {227.634033203125, 233.365966796875}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {
       QMRITools`GradientTools`Private`app$$ = GrayLevel[1], 
        QMRITools`GradientTools`Private`bi$$ = 0, 
        QMRITools`GradientTools`Private`bvalc$$ = 9000, 
        QMRITools`GradientTools`Private`bvald$$ = {10, 20, 30, 40, 60, 80, 
         100, 200, 300, 500, 700, 1000}, 
        QMRITools`GradientTools`Private`bvall$$ = {1000}, 
        QMRITools`GradientTools`Private`bvals$$ = {1000, 2000, 3000, 4000, 
         5000, 6000}, QMRITools`GradientTools`Private`charge$$ = Null, 
        QMRITools`GradientTools`Private`charts$$ = Null, 
        QMRITools`GradientTools`Private`ctype$$ = 1, 
        QMRITools`GradientTools`Private`dirs1$$ = 30, 
        QMRITools`GradientTools`Private`dirs2$$ = Null, 
        QMRITools`GradientTools`Private`dirs21$$ = 15, 
        QMRITools`GradientTools`Private`dirs22$$ = 15, 
        QMRITools`GradientTools`Private`dirs23$$ = 15, 
        QMRITools`GradientTools`Private`dirs24$$ = 15, 
        QMRITools`GradientTools`Private`dirs25$$ = 15, 
        QMRITools`GradientTools`Private`dirs26$$ = 15, 
        QMRITools`GradientTools`Private`disp$$ = 1, 
        QMRITools`GradientTools`Private`file$$ = "", 
        QMRITools`GradientTools`Private`gradc$$ = "", 
        QMRITools`GradientTools`Private`gradd$$ = "", 
        QMRITools`GradientTools`Private`gradm$$ = "", 
        QMRITools`GradientTools`Private`grads$$ = "", 
        QMRITools`GradientTools`Private`grid$$ = 9, 
        QMRITools`GradientTools`Private`gridf$$ = False, 
        QMRITools`GradientTools`Private`half$$ = 1, 
        QMRITools`GradientTools`Private`inter$$ = True, 
        QMRITools`GradientTools`Private`len$$ = Null, 
        QMRITools`GradientTools`Private`mirror$$ = True, 
        QMRITools`GradientTools`Private`mpoints$$ = {}, 
        QMRITools`GradientTools`Private`mult$$ = 1, 
        QMRITools`GradientTools`Private`names$$ = {
         "Set_Name", "Shells_Name", "Grid_Name", "DWI_Name"}, 
        QMRITools`GradientTools`Private`nshels$$ = 2, 
        QMRITools`GradientTools`Private`opacity$$ = 0.5, 
        QMRITools`GradientTools`Private`orderc$$ = "", 
        QMRITools`GradientTools`Private`orderd$$ = "", 
        QMRITools`GradientTools`Private`orderm$$ = "", 
        QMRITools`GradientTools`Private`orders$$ = "", 
        QMRITools`GradientTools`Private`out$$ = "", 
        QMRITools`GradientTools`Private`outc$$ = "", 
        QMRITools`GradientTools`Private`outd$$ = "", 
        QMRITools`GradientTools`Private`outm$$ = "", 
        QMRITools`GradientTools`Private`outs$$ = "", 
        QMRITools`GradientTools`Private`part$$ = 1, 
        QMRITools`GradientTools`Private`points$$ = {}, 
        QMRITools`GradientTools`Private`pointsc$$ = {}, 
        QMRITools`GradientTools`Private`pointspl$$ = {}, 
        QMRITools`GradientTools`Private`ppoints$$ = {}, 
        QMRITools`GradientTools`Private`ppointspl$$ = {}, 
        QMRITools`GradientTools`Private`proj$$ = False, 
        QMRITools`GradientTools`Private`random$$ = True, 
        QMRITools`GradientTools`Private`rlen$$ = Null, 
        QMRITools`GradientTools`Private`rlenc$$ = {}, 
        QMRITools`GradientTools`Private`running$$ = False, 
        QMRITools`GradientTools`Private`sc$$ = Null, 
        QMRITools`GradientTools`Private`scc$$ = Null, 
        QMRITools`GradientTools`Private`shel$$ = 1, 
        QMRITools`GradientTools`Private`show$$ = {1, 2}, 
        QMRITools`GradientTools`Private`showc$$ = All, 
        QMRITools`GradientTools`Private`size$$ = 430, 
        QMRITools`GradientTools`Private`steps$$ = 1000, 
        QMRITools`GradientTools`Private`sticks$$ = False, 
        QMRITools`GradientTools`Private`type$$ = "normal", 
        QMRITools`GradientTools`Private`typed$$ = "normal", 
        QMRITools`GradientTools`Private`va$$ = 0.5235987755982988, 
        QMRITools`GradientTools`Private`vel$$ = 1, 
        QMRITools`GradientTools`Private`viewvec$$ = {0, 0}, 
        QMRITools`GradientTools`Private`vp$$ = {1.3, -2.4, 2}, 
        QMRITools`GradientTools`Private`vv$$ = {0, 0, 1}, 
        QMRITools`GradientTools`Private`weight$$ = 0.5}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> (QMRITools`GradientTools`Private`bvall$$ = If[
          NumberQ[QMRITools`GradientTools`Private`bvall$$], {
          QMRITools`GradientTools`Private`bvall$$}, 
          QMRITools`GradientTools`Private`bvall$$]; 
       QMRITools`GradientTools`Private`names$$ = 
        Map[StringReplace[#, " " -> "_"]& , 
          QMRITools`GradientTools`Private`names$$]; 
       QMRITools`GradientTools`Private`dirs1$$ = 
        Clip[QMRITools`GradientTools`Private`dirs1$$, {3, 128}]; {
         QMRITools`GradientTools`Private`dirs21$$, 
          QMRITools`GradientTools`Private`dirs22$$, 
          QMRITools`GradientTools`Private`dirs23$$, 
          QMRITools`GradientTools`Private`dirs24$$, 
          QMRITools`GradientTools`Private`dirs25$$, 
          QMRITools`GradientTools`Private`dirs26$$} = 
        Clip[{QMRITools`GradientTools`Private`dirs21$$, 
           QMRITools`GradientTools`Private`dirs22$$, 
           QMRITools`GradientTools`Private`dirs23$$, 
           QMRITools`GradientTools`Private`dirs24$$, 
           QMRITools`GradientTools`Private`dirs25$$, 
           QMRITools`GradientTools`Private`dirs26$$}, {3, 128}]; 
       QMRITools`GradientTools`Private`dirs2$$ = 
        Part[{QMRITools`GradientTools`Private`dirs21$$, 
           QMRITools`GradientTools`Private`dirs22$$, 
           QMRITools`GradientTools`Private`dirs23$$, 
           QMRITools`GradientTools`Private`dirs24$$, 
           QMRITools`GradientTools`Private`dirs25$$, 
           QMRITools`GradientTools`Private`dirs26$$}, 
          Span[1, QMRITools`GradientTools`Private`nshels$$]]; 
       QMRITools`GradientTools`Private`out$$ = 
        Part[QMRITools`GradientTools`Private`names$$, 
           QMRITools`GradientTools`Private`mult$$] <> 
         Switch[QMRITools`GradientTools`Private`mult$$, 4, 
           If[
           QMRITools`GradientTools`Private`gradd$$ === "", 
            QMRITools`GradientTools`Private`gradd$$, 
            QMRITools`GradientTools`FinalGrads[
            QMRITools`GradientTools`Private`outd$$, {
             QMRITools`GradientTools`Private`inter$$, 
              QMRITools`GradientTools`Private`int, 
              QMRITools`GradientTools`Private`bi$$}, {
             QMRITools`GradientTools`Private`random$$, 
              QMRITools`GradientTools`Private`orderd$$}]], 3, 
           If[
           QMRITools`GradientTools`Private`gradc$$ === "", 
            QMRITools`GradientTools`Private`gradc$$, 
            QMRITools`GradientTools`FinalGrads[
            QMRITools`GradientTools`Private`outc$$, {
             QMRITools`GradientTools`Private`inter$$, 
              QMRITools`GradientTools`Private`int, 
              QMRITools`GradientTools`Private`bi$$}, {
             QMRITools`GradientTools`Private`random$$, 
              QMRITools`GradientTools`Private`orderc$$}]], 2, 
           If[
           QMRITools`GradientTools`Private`gradm$$ === "", 
            QMRITools`GradientTools`Private`gradm$$, 
            QMRITools`GradientTools`FinalGrads[
            QMRITools`GradientTools`Private`outm$$, {
             QMRITools`GradientTools`Private`inter$$, 
              QMRITools`GradientTools`Private`int, 
              QMRITools`GradientTools`Private`bi$$}, {
             QMRITools`GradientTools`Private`random$$, 
              QMRITools`GradientTools`Private`orderm$$}]], 1, 
           If[
           QMRITools`GradientTools`Private`grads$$ === "", 
            QMRITools`GradientTools`Private`grads$$, 
            QMRITools`GradientTools`FinalGrads[
            QMRITools`GradientTools`Private`outs$$, {
             QMRITools`GradientTools`Private`inter$$, 
              QMRITools`GradientTools`Private`int, 
              QMRITools`GradientTools`Private`bi$$}, {
             QMRITools`GradientTools`Private`random$$, 
              QMRITools`GradientTools`Private`orders$$}]]]; Dynamic[
         Switch[QMRITools`GradientTools`Private`disp$$, 1, 
          Switch[QMRITools`GradientTools`Private`mult$$, 1, 
           If[QMRITools`GradientTools`Private`points$$ === {}, 
            Column[{"", 
              Show[
               QMRITools`GradientTools`Private`SpherePlot[
               1, QMRITools`GradientTools`Private`opacity$$], ImageSize -> 
               QMRITools`GradientTools`Private`size$$, PlotLabel -> ""]}], 
            QMRITools`GradientTools`Private`pointspl$$ = 
             If[QMRITools`GradientTools`Private`proj$$, 
               Map[
               Sign[Part[#, 3] + 10.^(-16)] Normalize[#]& , 
                QMRITools`GradientTools`Private`points$$, {1}], 
               QMRITools`GradientTools`Private`points$$]; Column[{"", 
               Show[
                QMRITools`GradientTools`Private`SpherePlot[
                1, QMRITools`GradientTools`Private`opacity$$], 
                QMRITools`GradientTools`Private`ListSpherePloti[
                QMRITools`GradientTools`Private`pointspl$$, Red, 0.05], 
                If[QMRITools`GradientTools`Private`mirror$$, 
                 
                 QMRITools`GradientTools`Private`ListSpherePloti[-
                  QMRITools`GradientTools`Private`pointspl$$, Gray, 0.05], 
                 Graphics3D[{}]], 
                If[QMRITools`GradientTools`Private`sticks$$, 
                 QMRITools`GradientTools`Private`ListStickPlot[
                 QMRITools`GradientTools`Private`pointspl$$, 0.01], 
                 Graphics3D[{}]], ImageSize -> 
                QMRITools`GradientTools`Private`size$$, PlotLabel -> "", 
                Background -> QMRITools`GradientTools`Private`app$$]}, 
              Alignment -> Center]], 2, 
           If[QMRITools`GradientTools`Private`ppoints$$ === {}, 
            Column[{"", 
              Show[
               QMRITools`GradientTools`Private`SpherePlot[
               1, QMRITools`GradientTools`Private`opacity$$], ImageSize -> 
               QMRITools`GradientTools`Private`size$$, PlotLabel -> ""]}], 
            QMRITools`GradientTools`Private`ppointspl$$ = 
             If[QMRITools`GradientTools`Private`proj$$, 
               Map[
               Sign[Part[#, 3] + 10.^(-16)] Normalize[#]& , 
                QMRITools`GradientTools`Private`ppoints$$, {2}], 
               QMRITools`GradientTools`Private`ppoints$$]; 
            QMRITools`GradientTools`Private`len$$ = 
             Length[QMRITools`GradientTools`Private`ppoints$$]; 
            QMRITools`GradientTools`Private`rlen$$ = 
             Range[QMRITools`GradientTools`Private`len$$]; 
            If[QMRITools`GradientTools`Private`running$$, 
              QMRITools`GradientTools`Private`show$$ = 
              QMRITools`GradientTools`Private`rlen$$]; Column[{
               SetterBar[
                Dynamic[QMRITools`GradientTools`Private`show$$], 
                
                Join[{0 -> "multi", QMRITools`GradientTools`Private`rlen$$ -> 
                  "all"}, QMRITools`GradientTools`Private`rlen$$]], 
               If[QMRITools`GradientTools`Private`show$$ === 0, 
                Show[
                 Flatten[
                  MapThread[{
                    
                    QMRITools`GradientTools`Private`SpherePlot[#3, 
                    QMRITools`GradientTools`Private`opacity$$], 
                    
                    QMRITools`GradientTools`Private`ListSpherePloti[# #3, #2, 
                    0.05]}& , {
                    Reverse[QMRITools`GradientTools`Private`ppointspl$$], 
                    Reverse[
                    Part[{Red, Green, Blue, Yellow, Pink, Purple}, 
                    Span[1, QMRITools`GradientTools`Private`len$$]]], 
                    Range[
                    1, 0.5, (-0.5)/(QMRITools`GradientTools`Private`len$$ - 
                    1)]}]], 
                 If[QMRITools`GradientTools`Private`mirror$$, 
                  MapThread[
                  QMRITools`GradientTools`Private`ListSpherePloti[(-#) #2, 
                    Gray, 0.05]& , {
                   QMRITools`GradientTools`Private`ppointspl$$, 
                    Range[
                    1, 0.5, (-0.5)/(QMRITools`GradientTools`Private`len$$ - 
                    1)]}], 
                  Graphics3D[{}]], ImageSize -> 
                 QMRITools`GradientTools`Private`size$$, Background -> 
                 QMRITools`GradientTools`Private`app$$], 
                Show[
                 QMRITools`GradientTools`Private`SpherePlot[
                 1, QMRITools`GradientTools`Private`opacity$$], 
                 Part[
                  MapThread[
                  QMRITools`GradientTools`Private`ListSpherePloti[#, #2, 
                    0.05]& , {QMRITools`GradientTools`Private`ppointspl$$, 
                    Part[{Red, Green, Blue, Yellow, Pink, Purple}, 
                    Span[1, QMRITools`GradientTools`Private`len$$]]}], 
                  Clip[
                  QMRITools`GradientTools`Private`show$$, {
                   1, QMRITools`GradientTools`Private`len$$}]], 
                 If[QMRITools`GradientTools`Private`mirror$$, 
                  Part[
                   Map[
                   QMRITools`GradientTools`Private`ListSpherePloti[-#, Gray, 
                    0.05]& , QMRITools`GradientTools`Private`ppointspl$$], 
                   Clip[
                   QMRITools`GradientTools`Private`show$$, {
                    1, QMRITools`GradientTools`Private`len$$}]], 
                  Graphics3D[{}]], 
                 If[QMRITools`GradientTools`Private`sticks$$, 
                  Part[
                   Map[
                   QMRITools`GradientTools`Private`ListStickPlot[#, 0.01]& , 
                    QMRITools`GradientTools`Private`ppointspl$$], 
                   Clip[
                   QMRITools`GradientTools`Private`show$$, {
                    1, QMRITools`GradientTools`Private`len$$}]], 
                  Graphics3D[{}]], ImageSize -> 
                 QMRITools`GradientTools`Private`size$$, Background -> 
                 QMRITools`GradientTools`Private`app$$]]}, Alignment -> 
              Center]], 3, 
           Column[{"", 
             Show[
              QMRITools`GradientTools`Private`SpherePlot[
              0, QMRITools`GradientTools`Private`opacity$$], 
              QMRITools`GradientTools`Private`ListSpherePloti[
              QMRITools`GradientTools`Private`pointsc$$, Red, 0.05], 
              If[QMRITools`GradientTools`Private`mirror$$, 
               
               QMRITools`GradientTools`Private`ListSpherePloti[-
                QMRITools`GradientTools`Private`pointsc$$, Gray, 0.05], 
               Graphics3D[{}]], ImageSize -> 
              QMRITools`GradientTools`Private`size$$, PlotLabel -> "", 
              Background -> QMRITools`GradientTools`Private`app$$]}], 4, 
           Show[
            ListLinePlot[
             Map[{{0, #}, {1, #}}& , 
              Prepend[QMRITools`GradientTools`Private`bvald$$, 0]], PlotStyle -> 
             Directive[{Gray, Thick}], PlotRange -> {{0, 2}, Full}, AxesStyle -> 
             Thick, Axes -> {False, True}, AspectRatio -> 1.4, 
             AxesLabel -> {None, 
               Style["b-value", Bold, Black]}], 
            ListPlot[
             Map[{1, #}& , 
              Prepend[QMRITools`GradientTools`Private`bvald$$, 0]], PlotStyle -> 
             Red]]], 2, 
          Column[{
            Row[{
              Slider2D[
               Dynamic[
               QMRITools`GradientTools`Private`viewvec$$], {{-1, -1}, {1, 1}},
                ContinuousAction -> True], 
              SetterBar[
               Dynamic[QMRITools`GradientTools`Private`ctype$$], {
               1 -> "polar", 2 -> "even grid", 3 -> "scaled grid"}]}, 
             ImageSize -> 400, Alignment -> Center], 
            If[QMRITools`GradientTools`Private`mult$$ == 2, 
             SetterBar[
              Dynamic[QMRITools`GradientTools`Private`showc$$], 
              Join[{All -> "all"}, QMRITools`GradientTools`Private`rlenc$$]], 
             ""], 
            Dynamic[
             Show[
              Part[
              QMRITools`GradientTools`Private`charts$$, 
               QMRITools`GradientTools`Private`ctype$$], 
              Switch[QMRITools`GradientTools`Private`mult$$, 1, 
               If[QMRITools`GradientTools`Private`points$$ === {}, 
                Graphics[], 
                QMRITools`GradientTools`Private`pointspl$$ = 
                 If[QMRITools`GradientTools`Private`proj$$, 
                   Map[
                   Sign[Part[#, 3] + 10.^(-16)] Normalize[#]& , 
                    QMRITools`GradientTools`Private`points$$, {1}], 
                   QMRITools`GradientTools`Private`points$$]; 
                QMRITools`GradientTools`Private`PlotChartPoints[
                 QMRITools`GradientTools`Private`pointspl$$, {
                  QMRITools`GradientTools`Private`mirror$$, Red}]], 2, 
               If[QMRITools`GradientTools`Private`ppoints$$ === {}, 
                Graphics[], 
                QMRITools`GradientTools`Private`ppointspl$$ = 
                 If[QMRITools`GradientTools`Private`proj$$, 
                   Map[
                   Sign[Part[#, 3] + 10.^(-16)] Normalize[#]& , 
                    QMRITools`GradientTools`Private`ppoints$$, {2}], 
                   QMRITools`GradientTools`Private`ppoints$$]; 
                QMRITools`GradientTools`Private`len$$ = 
                 Length[QMRITools`GradientTools`Private`ppoints$$]; 
                QMRITools`GradientTools`Private`rlenc$$ = 
                 Range[QMRITools`GradientTools`Private`len$$]; 
                QMRITools`GradientTools`Private`PlotChartPoints[
                  Part[
                  QMRITools`GradientTools`Private`ppointspl$$, 
                   QMRITools`GradientTools`Private`showc$$], {
                  QMRITools`GradientTools`Private`mirror$$, 
                   
                   Part[{Red, Green, Blue, Yellow, Pink, Purple}, 
                    QMRITools`GradientTools`Private`showc$$]}]], 
               Blank[], 
               Graphics[]]]]}, Alignment -> Center], 3, 
          QMRITools`GradientTools`Private`out$$, 4, 
          Switch[QMRITools`GradientTools`Private`mult$$, 1, 
           If[QMRITools`GradientTools`Private`orders$$ === "", 
            Graphics[], 
            QMRITools`PlottingTools`PlotDuty[{
              ConstantArray[QMRITools`GradientTools`Private`grads$$, 
               Length[QMRITools`GradientTools`Private`bvall$$]], 
              QMRITools`GradientTools`Private`bvall$$, 
              QMRITools`GradientTools`Private`orders$$}, 
             QMRITools`GradientTools`Private`random$$]], 2, 
           If[QMRITools`GradientTools`Private`orderm$$ === "", 
            Graphics[], 
            
            QMRITools`PlottingTools`PlotDuty[{
             QMRITools`GradientTools`Private`gradm$$, 
              Part[QMRITools`GradientTools`Private`bvals$$, 
               Span[1, QMRITools`GradientTools`Private`nshels$$]], 
              QMRITools`GradientTools`Private`orderm$$}, 
             QMRITools`GradientTools`Private`random$$]], 3, 
           If[QMRITools`GradientTools`Private`orderc$$ === "", 
            Graphics[], 
            
            QMRITools`PlottingTools`PlotDuty[{
             QMRITools`GradientTools`Private`gradc$$, 
              QMRITools`GradientTools`Private`bvalc$$, 
              QMRITools`GradientTools`Private`orderc$$}, 
             QMRITools`GradientTools`Private`random$$]], 4, 
           If[QMRITools`GradientTools`Private`orderd$$ === "", 
            Graphics[], 
            QMRITools`PlottingTools`PlotDuty[{
              ConstantArray[QMRITools`GradientTools`Private`gradd$$, 
               Length[QMRITools`GradientTools`Private`bvald$$]], 
              QMRITools`GradientTools`Private`bvald$$, 
              QMRITools`GradientTools`Private`orderd$$}, 
             QMRITools`GradientTools`Private`random$$]]]]]), "Specifications" :> {
        Row[{"  Set Name ", 
          InputField[
           Dynamic[
            Part[
            QMRITools`GradientTools`Private`names$$, 
             QMRITools`GradientTools`Private`mult$$]], String]}], 
        Delimiter, {{
         QMRITools`GradientTools`Private`disp$$, 1, "display gradients"}, {
         1 -> "graphics", 2 -> "chart", 3 -> "text", 4 -> "G load"}}, {{
         QMRITools`GradientTools`Private`opacity$$, 0.5, "sphere opacity"}, 0,
          1, 0.1, ControlType -> Slider}, 
        Row[{" sticks: ", 
          Checkbox[
           Dynamic[QMRITools`GradientTools`Private`sticks$$]], 
          "   mirror grad.: ", 
          Checkbox[
           Dynamic[QMRITools`GradientTools`Private`mirror$$]], 
          "   project grad. on half: ", 
          Checkbox[
           Dynamic[QMRITools`GradientTools`Private`proj$$]]}], 
        Grid[{{
           Button[
           "top", QMRITools`GradientTools`Private`vp$$ = {0, 0, 3.38}, 
            ImageSize -> {50, 20}, FrameMargins -> 0, FontSize -> 10], 
           Button[
           "right", QMRITools`GradientTools`Private`vp$$ = {3.38, 0, 0}, 
            ImageSize -> {50, 20}, FrameMargins -> 0, FontSize -> 10], 
           Button[
           "front", QMRITools`GradientTools`Private`vp$$ = {0, 3.38, 0}, 
            ImageSize -> {50, 20}, FrameMargins -> 0, FontSize -> 10], 
           Button[
           "reset", {
             QMRITools`GradientTools`Private`vp$$, 
              QMRITools`GradientTools`Private`vv$$, 
              QMRITools`GradientTools`Private`va$$} = {{1.3, -2.4, 2}, {0, 0, 
              1}, 30. Degree}, ImageSize -> {100, 20}, FrameMargins -> 0, 
            FontSize -> 10]}}], 
        Delimiter, {{
         QMRITools`GradientTools`Private`half$$, 1, "Full or half sphere"}, {
         1 -> "half sphere", 0 -> "full sphere"}}, {{
         QMRITools`GradientTools`Private`mult$$, 1, "shells"}, {
         1 -> "single shell", 2 -> "multi shell", 3 -> "cartesian", 4 -> 
          "DWI"}, ControlType -> PopupMenu, FieldSize -> {13, 0.7}}, {{
         QMRITools`GradientTools`Private`type$$, "normal", "type"}, {
         "normal", "normal fixed z", "normal fixed x, y and z", "over-plus", 
          "over-plus fixed z", "over-plus fixed x, y and z"}, ControlType -> 
         PopupMenu, FieldSize -> {13, 0.7}, ControlPlacement -> 1}, {{
         QMRITools`GradientTools`Private`dirs1$$, 30, "number of gradients"}, 
         6, 128, 1, Appearance -> "Labeled", ImageSize -> Tiny, 
         AppearanceElements -> {"InputField"}, ControlPlacement -> 2}, {{
         QMRITools`GradientTools`Private`nshels$$, 2, "number of shells"}, {2,
          3, 4, 5, 6}, ControlPlacement -> 3}, {{
         QMRITools`GradientTools`Private`shel$$, 1, " shell"}, 
         Dynamic[
          Range[QMRITools`GradientTools`Private`nshels$$]], ControlType -> 
         SetterBar, ControlPlacement -> 4}, {{
         QMRITools`GradientTools`Private`dirs21$$, 15, 
          "number of gradients shell 1"}, 3, 128, 1, Appearance -> "Labeled", 
         ImageSize -> Tiny, AppearanceElements -> {"InputField"}, 
         ControlPlacement -> 5}, {{
         QMRITools`GradientTools`Private`dirs22$$, 15, 
          "number of gradients shell 2"}, 3, 128, 1, Appearance -> "Labeled", 
         ImageSize -> Tiny, AppearanceElements -> {"InputField"}, 
         ControlPlacement -> 6}, {{
         QMRITools`GradientTools`Private`dirs23$$, 15, 
          "number of gradients shell 3"}, 3, 128, 1, Appearance -> "Labeled", 
         ImageSize -> Tiny, AppearanceElements -> {"InputField"}, 
         ControlPlacement -> 7}, {{
         QMRITools`GradientTools`Private`dirs24$$, 15, 
          "number of gradients shell 4"}, 3, 128, 1, Appearance -> "Labeled", 
         ImageSize -> Tiny, AppearanceElements -> {"InputField"}, 
         ControlPlacement -> 8}, {{
         QMRITools`GradientTools`Private`dirs25$$, 15, 
          "number of gradients shell 5"}, 3, 128, 1, Appearance -> "Labeled", 
         ImageSize -> Tiny, AppearanceElements -> {"InputField"}, 
         ControlPlacement -> 9}, {{
         QMRITools`GradientTools`Private`dirs26$$, 15, 
          "number of gradients shell 6"}, 3, 128, 1, Appearance -> "Labeled", 
         ImageSize -> Tiny, AppearanceElements -> {"InputField"}, 
         ControlPlacement -> 10}, {{
         QMRITools`GradientTools`Private`weight$$, 0.5, "shell weighting"}, 0,
          1, 0.05, ControlType -> Slider, Appearance -> "Labeled", ImageSize -> 
         Tiny, AppearanceElements -> {"InputField"}, ControlPlacement -> 
         11}, {{QMRITools`GradientTools`Private`grid$$, 9, 
          "cartesian grid size"}, 5, 15, 1, Appearance -> "Labeled", 
         ImageSize -> Tiny, ControlPlacement -> 12}, {{
         QMRITools`GradientTools`Private`gridf$$, True, "full even grid"}, {
         False -> "no (in between odd grid)", True -> "yes"}, 
         ControlPlacement -> 13}, {{
         QMRITools`GradientTools`Private`typed$$, "normal", 
          "           type"}, {"normal", "over-plus"}, ControlType -> 
         SetterBar, ControlPlacement -> 14}, 
        PaneSelector[{1 -> Column[{
             Manipulate`Place[1], 
             Manipulate`Place[2]}], 2 -> Column[{
             Row[{
               Manipulate`Place[3], 
               Manipulate`Place[4]}], 
             PaneSelector[{
               Manipulate`Place[5], 
               Manipulate`Place[6], 
               Manipulate`Place[7], 
               Manipulate`Place[8], 
               Manipulate`Place[9], 
               Manipulate`Place[10]}, 
              Dynamic[QMRITools`GradientTools`Private`shel$$]], 
             Manipulate`Place[11]}], 3 -> Column[{
             Manipulate`Place[12], 
             Manipulate`Place[13]}], 4 -> Manipulate`Place[14]}, 
         Dynamic[QMRITools`GradientTools`Private`mult$$]], Delimiter, 
        PaneSelector[{1 -> Row[{"  b-value:   ", 
             InputField[
              Dynamic[QMRITools`GradientTools`Private`bvall$$], Expression, 
              Background -> Dynamic[
                If[
                 Or[
                  And[
                   AllTrue[QMRITools`GradientTools`Private`bvall$$, NumberQ], 
                   ListQ[QMRITools`GradientTools`Private`bvall$$]], 
                  NumberQ[QMRITools`GradientTools`Private`bvall$$]], None, 
                 Lighter[
                  Lighter[Red]]]]]}], 2 -> Dynamic[
            Grid[
             Partition[
              PadRight[
               Map[Row[{"b-val" <> ToString[#] <> ":", 
                  InputField[
                   Dynamic[
                    Part[QMRITools`GradientTools`Private`bvals$$, #]], Number,
                    FieldSize -> 5]}]& , 
                Range[1, QMRITools`GradientTools`Private`nshels$$]], 6, ""], 
              3]]], 3 -> Row[{"max b (corner):   ", 
             InputField[
              Dynamic[QMRITools`GradientTools`Private`bvalc$$], Number]}], 4 -> 
          Row[{"      b-value:   ", 
             InputField[
              Dynamic[QMRITools`GradientTools`Private`bvald$$], Expression, 
              Background -> Dynamic[
                If[
                 Or[
                  And[
                   AllTrue[QMRITools`GradientTools`Private`bvald$$, NumberQ], 
                   ListQ[QMRITools`GradientTools`Private`bvald$$]], 
                  NumberQ[QMRITools`GradientTools`Private`bvald$$]], None, 
                 Lighter[
                  Lighter[Red]]]]]}]}, 
         Dynamic[QMRITools`GradientTools`Private`mult$$]], Delimiter, 
        Dynamic[
         Grid[{{"  interleave b: ", 
            Checkbox[
             Dynamic[QMRITools`GradientTools`Private`inter$$]], 
            "Optimize G load: ", 
            Checkbox[
             Dynamic[QMRITools`GradientTools`Private`random$$]]}, 
           If[
           QMRITools`GradientTools`Private`inter$$, {"  interleave b-value: ", 
             InputField[
              Dynamic[QMRITools`GradientTools`Private`bi$$], Number, 
              FieldSize -> 3], "interleave b every: ", 
             PopupMenu[
              Dynamic[QMRITools`GradientTools`Private`int], 
              Range[3, 20]]}, {}]}, Alignment -> Left]], 
        Delimiter, {{
         QMRITools`GradientTools`Private`steps$$, 1000, 
          "quality (iterations)"}, {
         500 -> "poor (500)", 1000 -> "normal (1000)", 2500 -> 
          "excellent (2500)", 5000 -> "perfect (5000)", 10000 -> 
          "extreme (10000)"}, ControlType -> PopupMenu, 
         FieldSize -> {9, 0.7}}, 
        Row[{
          Button["generate", QMRITools`GradientTools`Private`app$$ = Lighter[
              Lighter[LightGray]]; QMRITools`GradientTools`Private`disp$$ = 1; 
           QMRITools`GradientTools`Private`running$$ = True; 
           QMRITools`GradientTools`Private`mirror$$ = 
            If[QMRITools`GradientTools`Private`half$$ == 0, False, True]; 
           QMRITools`GradientTools`Private`proj$$ = False; Pause[0.2]; 
           Switch[QMRITools`GradientTools`Private`mult$$, 4, 
             QMRITools`GradientTools`Private`gradd$$ = 
              If[QMRITools`GradientTools`Private`typed$$ == "normal", {{1, 0, 
                0}, {0, 1, 0}, {0, 0, 1}}, {{-0.707107, -0.5, 0.5}, {
                0.707107, -0.5, 0.5}, {0., 0.707107, 0.707107}}]; Null, 3, 
             QMRITools`GradientTools`Private`gradc$$ = (
               QMRITools`GradientTools`Private`pointsc$$ = 
               QMRITools`GradientTools`Private`GradGrid[
                QMRITools`GradientTools`Private`grid$$, 
                 QMRITools`GradientTools`Private`gridf$$]); Null, 
             2, {QMRITools`GradientTools`Private`mpoints$$, 
                QMRITools`GradientTools`Private`vel$$, 
                QMRITools`GradientTools`Private`part$$} = 
              QMRITools`GradientTools`Private`Prepare[
               QMRITools`GradientTools`Private`dirs2$$, 
                QMRITools`GradientTools`Private`half$$, {}, 
                QMRITools`GradientTools`Private`weight$$]; Pause[0.5]; 
             Do[QMRITools`GradientTools`Private`mpoints$$ = 
                QMRITools`GradientTools`Private`GradOptimize4C[
                 QMRITools`GradientTools`Private`mpoints$$, 
                  QMRITools`GradientTools`Private`vel$$, 
                  QMRITools`GradientTools`Private`half$$]; 
               QMRITools`GradientTools`Private`ppoints$$ = Map[Chop[
                   Part[QMRITools`GradientTools`Private`mpoints$$, #]]& , 
                  QMRITools`GradientTools`Private`part$$]; Null, {
               QMRITools`GradientTools`Private`steps$$}]; 
             QMRITools`GradientTools`Private`gradm$$ = Map[Chop[
                 Part[QMRITools`GradientTools`Private`mpoints$$, #]]& , 
                QMRITools`GradientTools`Private`part$$]; Null, 1, 
             QMRITools`GradientTools`Private`grads$$ = 
              Switch[QMRITools`GradientTools`Private`type$$, "normal", 
                QMRITools`GradientTools`Private`points$$ = 
                 QMRITools`GradientTools`Private`Prepare[{
                   QMRITools`GradientTools`Private`dirs1$$}, 
                   QMRITools`GradientTools`Private`half$$]; Pause[0.5]; 
                Do[QMRITools`GradientTools`Private`points$$ = 
                  QMRITools`GradientTools`Private`GradOptimize1C[
                   QMRITools`GradientTools`Private`points$$, 
                    QMRITools`GradientTools`Private`half$$], {
                  QMRITools`GradientTools`Private`steps$$}]; 
                Chop[QMRITools`GradientTools`Private`points$$], 
                "normal fixed z", 
                QMRITools`GradientTools`Private`points$$ = 
                 QMRITools`GradientTools`Private`Prepare[{
                   QMRITools`GradientTools`Private`dirs1$$}, 
                   QMRITools`GradientTools`Private`half$$, {{0, 0, 1}}]; 
                Pause[0.5]; 
                Do[QMRITools`GradientTools`Private`points$$ = 
                  QMRITools`GradientTools`Private`GradOptimize2C[
                   QMRITools`GradientTools`Private`points$$, 1, 
                    QMRITools`GradientTools`Private`half$$], {
                  QMRITools`GradientTools`Private`steps$$}]; 
                Chop[QMRITools`GradientTools`Private`points$$], 
                "normal fixed x, y and z", 
                QMRITools`GradientTools`Private`points$$ = 
                 QMRITools`GradientTools`Private`Prepare[{
                   QMRITools`GradientTools`Private`dirs1$$}, 
                   QMRITools`GradientTools`Private`half$$, {{1, 0, 0}, {0, 1, 
                   0}, {0, 0, 1}}]; Pause[0.5]; 
                Do[QMRITools`GradientTools`Private`points$$ = 
                  QMRITools`GradientTools`Private`GradOptimize2C[
                   QMRITools`GradientTools`Private`points$$, 3, 
                    QMRITools`GradientTools`Private`half$$], {
                  QMRITools`GradientTools`Private`steps$$}]; 
                Chop[QMRITools`GradientTools`Private`points$$], "over-plus", 
                QMRITools`GradientTools`Private`half$$ = 1; 
                QMRITools`GradientTools`Private`points$$ = 
                 QMRITools`GradientTools`Private`Prepare[{
                   QMRITools`GradientTools`Private`dirs1$$}, 
                   QMRITools`GradientTools`Private`half$$]; 
                QMRITools`GradientTools`Private`points$$ = 
                 Join[{{0, 0, 1}, {0, 1, 0}, {1, 0, 0}}, 
                   QMRITools`GradientTools`Private`points$$]; Pause[0.5]; 
                Do[QMRITools`GradientTools`Private`points$$ = 
                  QMRITools`GradientTools`Private`GradOptimize2C[
                   QMRITools`GradientTools`Private`points$$, 3, 
                    QMRITools`GradientTools`Private`half$$], {
                   Round[QMRITools`GradientTools`Private`steps$$/10]}]; 
                QMRITools`GradientTools`Private`charge$$ = Join[
                   
                   ConstantArray[(0.5 
                    QMRITools`GradientTools`Private`dirs1$$)^1.2, 3], 
                   ConstantArray[1, QMRITools`GradientTools`Private`dirs1$$]]; 
                Do[QMRITools`GradientTools`Private`points$$ = 
                  QMRITools`GradientTools`Private`GradOptimize3C[
                   QMRITools`GradientTools`Private`points$$, 
                    QMRITools`GradientTools`Private`charge$$, 3], {
                  QMRITools`GradientTools`Private`steps$$}]; 
                QMRITools`GradientTools`Private`points$$ = Chop[
                   Drop[QMRITools`GradientTools`Private`points$$, 3]], 
                "over-plus fixed z", 
                QMRITools`GradientTools`Private`half$$ = 1; 
                QMRITools`GradientTools`Private`points$$ = 
                 QMRITools`GradientTools`Private`Prepare[{
                   QMRITools`GradientTools`Private`dirs1$$ - 1}, 
                   QMRITools`GradientTools`Private`half$$]; 
                QMRITools`GradientTools`Private`points$$ = 
                 Join[{{0, 0, 1}, {0, 1, 0}, {1, 0, 0}, {0., 0.707107, 
                    0.707107}}, QMRITools`GradientTools`Private`points$$]; 
                Pause[0.5]; 
                Do[QMRITools`GradientTools`Private`points$$ = 
                  QMRITools`GradientTools`Private`GradOptimize2C[
                   QMRITools`GradientTools`Private`points$$, 4, 
                    QMRITools`GradientTools`Private`half$$], {
                   Round[QMRITools`GradientTools`Private`steps$$/10]}]; 
                QMRITools`GradientTools`Private`charge$$ = Join[
                   
                   ConstantArray[(0.5 
                    QMRITools`GradientTools`Private`dirs1$$)^1.2, 3], 
                   ConstantArray[1, QMRITools`GradientTools`Private`dirs1$$]]; 
                Do[QMRITools`GradientTools`Private`points$$ = 
                  QMRITools`GradientTools`Private`GradOptimize3C[
                   QMRITools`GradientTools`Private`points$$, 
                    QMRITools`GradientTools`Private`charge$$, 4], {
                  QMRITools`GradientTools`Private`steps$$}]; 
                QMRITools`GradientTools`Private`points$$ = Chop[
                   Drop[QMRITools`GradientTools`Private`points$$, 3]], 
                "over-plus fixed x, y and z", 
                QMRITools`GradientTools`Private`half$$ = 1; 
                QMRITools`GradientTools`Private`points$$ = 
                 QMRITools`GradientTools`Private`Prepare[{
                   QMRITools`GradientTools`Private`dirs1$$ - 3}, 
                   QMRITools`GradientTools`Private`half$$]; 
                QMRITools`GradientTools`Private`points$$ = 
                 Join[{{0, 0, 1}, {0, 1, 0}, {1, 0, 0}, {-0.707107, -0.5, 
                    0.5}, {0.707107, -0.5, 0.5}, {0., 0.707107, 0.707107}}, 
                   QMRITools`GradientTools`Private`points$$]; Pause[0.5]; 
                Do[QMRITools`GradientTools`Private`points$$ = 
                  QMRITools`GradientTools`Private`GradOptimize2C[
                   QMRITools`GradientTools`Private`points$$, 6, 
                    QMRITools`GradientTools`Private`half$$], {
                   Round[QMRITools`GradientTools`Private`steps$$/10]}]; 
                QMRITools`GradientTools`Private`charge$$ = Join[
                   
                   ConstantArray[(0.5 
                    QMRITools`GradientTools`Private`dirs1$$)^1.2, 3], 
                   ConstantArray[1, QMRITools`GradientTools`Private`dirs1$$]]; 
                Do[
                 QMRITools`GradientTools`Private`points$$ = 
                  QMRITools`GradientTools`Private`GradOptimize3C[
                   QMRITools`GradientTools`Private`points$$, 
                    QMRITools`GradientTools`Private`charge$$, 6], {
                  QMRITools`GradientTools`Private`steps$$}]; 
                QMRITools`GradientTools`Private`points$$ = Chop[
                   Drop[QMRITools`GradientTools`Private`points$$, 3]]]; Null]; 
           Switch[QMRITools`GradientTools`Private`mult$$, 1, 
             QMRITools`GradientTools`Private`outs$$ = 
              QMRITools`GradientTools`ConvertGrads[
                ConstantArray[QMRITools`GradientTools`Private`grads$$, 
                 Length[QMRITools`GradientTools`Private`bvall$$]], 
                QMRITools`GradientTools`Private`bvall$$, 
                QMRITools`GradientTools`Private`bi$$]; 
             QMRITools`GradientTools`Private`orders$$ = 
              QMRITools`GradientTools`FindOrder[
                ConstantArray[QMRITools`GradientTools`Private`grads$$, 
                 Length[QMRITools`GradientTools`Private`bvall$$]], 
                QMRITools`GradientTools`Private`bvall$$]; Null, 2, 
             QMRITools`GradientTools`Private`outm$$ = 
              QMRITools`GradientTools`ConvertGrads[
               QMRITools`GradientTools`Private`gradm$$, 
                Part[QMRITools`GradientTools`Private`bvals$$, 
                 Span[1, QMRITools`GradientTools`Private`nshels$$]], 
                QMRITools`GradientTools`Private`bi$$]; 
             QMRITools`GradientTools`Private`orderm$$ = 
              QMRITools`GradientTools`FindOrder[
               QMRITools`GradientTools`Private`gradm$$, 
                Part[QMRITools`GradientTools`Private`bvals$$, 
                 Span[1, QMRITools`GradientTools`Private`nshels$$]]]; Null, 3,
              QMRITools`GradientTools`Private`outc$$ = 
              QMRITools`GradientTools`ConvertGrads[
               QMRITools`GradientTools`Private`gradc$$, {
                QMRITools`GradientTools`Private`bvalc$$}, 
                QMRITools`GradientTools`Private`bi$$]; 
             QMRITools`GradientTools`Private`orderc$$ = 
              QMRITools`GradientTools`FindOrder[
               QMRITools`GradientTools`Private`gradc$$, 
                QMRITools`GradientTools`Private`bvalc$$]; Null, 4, 
             QMRITools`GradientTools`Private`outd$$ = 
              QMRITools`GradientTools`ConvertGrads[
                ConstantArray[QMRITools`GradientTools`Private`gradd$$, 
                 Length[QMRITools`GradientTools`Private`bvald$$]], 
                QMRITools`GradientTools`Private`bvald$$, 
                QMRITools`GradientTools`Private`bi$$]; 
             Part[QMRITools`GradientTools`Private`outd$$, 2] = Join[
                If[
                QMRITools`GradientTools`Private`typed$$ == "normal", {
                 " 1.00000    0.00000    0.00000       " <> ToString[
                    Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                  " 0.00000    1.00000    0.00000       " <> ToString[
                    Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                  " 0.00000    0.00000    1.00000       " <> ToString[
                    Round[QMRITools`GradientTools`Private`bi$$, 0.1]]}, {
                 "-0.70711   -0.50000    0.50000       " <> ToString[
                    Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                  " 0.70711   -0.50000    0.50000       " <> ToString[
                    Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                  " 0.00000    0.70711    0.70711       " <> ToString[
                    Round[QMRITools`GradientTools`Private`bi$$, 0.1]]}], {
                " 0.02704    0.79706    0.60330       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 "-0.09999   -0.59783    0.79536       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 " 0.23191   -0.77261    0.59101       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 " 0.52867   -0.79903    0.28646       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 "-0.18297   -0.98140    0.05818       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 "-0.86286    0.19578    0.46599       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 " 0.05126    0.20181    0.97808       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 "-0.66047    0.01890    0.75062       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 " 0.65426   -0.18818    0.73249       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 "-0.33052    0.11752    0.93646       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 "-0.95407   -0.14465    0.26236       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 "-0.14402   -0.86963    0.47224       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 "-0.78028   -0.56460    0.26904       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 "-0.75319   -0.31631    0.57675       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 "-0.41392   -0.31357    0.85460       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 " 0.56536    0.27275    0.77845       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 "-0.73743    0.58153    0.34354       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 " 0.29639   -0.44648    0.84428       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 "-0.38689    0.75986    0.52243       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 "-0.20081    0.52214    0.82888       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 " 0.79424   -0.60284    0.07593       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 " 0.98777    0.03678    0.15153       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 " 0.29973    0.90469    0.30281       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 "-0.95633    0.27860    0.08835       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 "-0.49976   -0.83556    0.22819       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 " 0.90574    0.41773    0.07170       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 " 0.77284    0.45698    0.44032       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 " 0.35339   -0.03796    0.93471       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 " 0.84918    0.07921    0.52213       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 "-0.50085    0.85590    0.12880       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 " 0.47526    0.67317    0.56654       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 " 0.87597   -0.32192    0.35923       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 " 0.64492    0.75075    0.14303       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 "-0.12687    0.96109    0.24536       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 " 0.60869   -0.54852    0.57325       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 "-0.03797   -0.21873    0.97505       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 "-0.47780   -0.64010    0.60165       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 "-0.57319    0.42677    0.69952       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 " 0.18760   -0.96394    0.18874       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]], 
                 " 0.23342    0.50887    0.28591       " <> ToString[
                   Round[QMRITools`GradientTools`Private`bi$$, 0.1]]}]; 
             QMRITools`GradientTools`Private`orderd$$ = 
              QMRITools`GradientTools`FindOrder[
                ConstantArray[QMRITools`GradientTools`Private`gradd$$, 
                 Length[QMRITools`GradientTools`Private`bvald$$]], 
                QMRITools`GradientTools`Private`bvald$$]; Null]; Pause[0.1]; 
           QMRITools`GradientTools`Private`running$$ = False; 
           QMRITools`GradientTools`Private`app$$ = White; Null, Method -> 
           "Queued", ImageSize -> {120, 23}, FontSize -> 10], 
          Button["clipboard", 
           CopyToClipboard[QMRITools`GradientTools`Private`out$$], 
           ImageSize -> {100, 23}, FontSize -> 10], 
          Button[
          "file", QMRITools`GradientTools`Private`file$$ = 
            SystemDialogInput["FileSave", "dti_vectors_input.txt"]; If[
             Not[QMRITools`GradientTools`Private`file$$ === $Canceled], 
             Export[
             QMRITools`GradientTools`Private`file$$, 
              QMRITools`GradientTools`Private`out$$, "Text"]], 
           ImageSize -> {100, 23}, Method -> "Queued", FontSize -> 10]}], 
        Delimiter, 
        Row[{
          Style[
          "Made by Martijn Froeling, Phd \nm.froeling@umcutrecht.nl", {Small, 
            GrayLevel[0.5]}]}], {{
         QMRITools`GradientTools`Private`points$$, {}}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`pointspl$$, {}}, 
         ControlType -> None}, {{
         QMRITools`GradientTools`Private`pointsc$$, {}}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`ppoints$$, {}}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`ppointspl$$, {}}, 
         ControlType -> None}, {{
         QMRITools`GradientTools`Private`mpoints$$, {}}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`gradd$$, ""}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`gradm$$, ""}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`grads$$, ""}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`gradc$$, ""}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`outd$$, ""}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`outc$$, ""}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`outm$$, ""}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`outs$$, ""}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`orderd$$, ""}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`orderc$$, ""}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`orderm$$, ""}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`orders$$, ""}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`out$$, ""}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`file$$, ""}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`show$$, {1, 2}}, 
         ControlType -> None}, {{
         QMRITools`GradientTools`Private`showc$$, All}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`weight$$, 0.5}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`grid$$, 9}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`gridf$$, False}, 
         ControlType -> None}, {{
         QMRITools`GradientTools`Private`running$$, False}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`app$$, 
          GrayLevel[1]}, ControlType -> None}, {{
         QMRITools`GradientTools`Private`size$$, 430}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`inter$$, True}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`bi$$, 0}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`random$$, True}, 
         ControlType -> None}, {{
         QMRITools`GradientTools`Private`sticks$$, False}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`mirror$$, True}, 
         ControlType -> None}, {{
         QMRITools`GradientTools`Private`proj$$, False}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`vel$$, 1}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`part$$, 1}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`dirs1$$, 30}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`dirs21$$, 15}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`dirs22$$, 15}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`dirs23$$, 15}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`dirs24$$, 15}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`dirs25$$, 15}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`dirs26$$, 15}, ControlType -> 
         None}, {{
         QMRITools`GradientTools`Private`bvald$$, {10, 20, 30, 40, 60, 80, 
          100, 200, 300, 500, 700, 1000}}, ControlType -> None}, {{
         QMRITools`GradientTools`Private`bvall$$, {1000}}, ControlType -> 
         None}, {{
         QMRITools`GradientTools`Private`bvals$$, {1000, 2000, 3000, 4000, 
          5000, 6000}}, ControlType -> None}, {{
         QMRITools`GradientTools`Private`bvalc$$, 9000}, ControlType -> 
         None}, {QMRITools`GradientTools`Private`dirs2$$, ControlType -> 
         None}, {QMRITools`GradientTools`Private`type$$, ControlType -> 
         None}, {QMRITools`GradientTools`Private`typed$$, ControlType -> 
         None}, {QMRITools`GradientTools`Private`sc$$, ControlType -> None}, {
        QMRITools`GradientTools`Private`scc$$, ControlType -> None}, {
        QMRITools`GradientTools`Private`shel$$, ControlType -> None}, {{
         QMRITools`GradientTools`Private`nshels$$, 2}, ControlType -> None}, {
        QMRITools`GradientTools`Private`len$$, ControlType -> None}, {
        QMRITools`GradientTools`Private`rlen$$, ControlType -> None}, {{
         QMRITools`GradientTools`Private`rlenc$$, {}}, ControlType -> None}, {
        QMRITools`GradientTools`Private`charge$$, ControlType -> None}, {{
         QMRITools`GradientTools`Private`names$$, {
          "Set_Name", "Shells_Name", "Grid_Name", "DWI_Name"}}, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`vp$$, {1.3, -2.4, 2}}, 
         ControlType -> None}, {{
         QMRITools`GradientTools`Private`va$$, 0.5235987755982988}, 
         ControlType -> None}, {{
         QMRITools`GradientTools`Private`vv$$, {0, 0, 1}}, ControlType -> 
         None}, {QMRITools`GradientTools`Private`charts$$, ControlType -> 
         None}, {{QMRITools`GradientTools`Private`viewvec$$, {0, 0}}, 
         ControlType -> None}, {{QMRITools`GradientTools`Private`ctype$$, 1}, 
         ControlType -> None}}, 
      "Options" :> {
       ContentSize -> {450, 510}, ControlPlacement -> Left, ContinuousAction -> 
        True, AppearanceElements -> None, AutorunSequencing -> {1}}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{802., {286., 291.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({
      QMRITools`GradientTools`Private`int = 3, 
       QMRITools`GradientTools`Private`SpherePlot[
         Pattern[QMRITools`GradientTools`Private`size$, 
          Blank[]], 
         Pattern[QMRITools`GradientTools`Private`op$, 
          Blank[]]] := If[
         Or[
         QMRITools`GradientTools`Private`size$ == 0, 
          QMRITools`GradientTools`Private`size$ == 0.], 
         Graphics3D[{}, Lighting -> "Neutral", 
          PlotRange -> {{-1.1, 1.1}, {-1.1, 1.1}, {-1.1, 1.1}}, ViewPoint -> 
          Dynamic[FE`QMRITools`GradientTools`Private`vp$$368], ViewVertical -> 
          Dynamic[FE`QMRITools`GradientTools`Private`vv$$368], ViewAngle -> 
          Dynamic[FE`QMRITools`GradientTools`Private`va$$368], 
          SphericalRegion -> True], 
         Graphics3D[{White, 
           Opacity[QMRITools`GradientTools`Private`op$], 
           Sphere[{0, 0, 0}, 0.95 QMRITools`GradientTools`Private`size$]}, 
          Lighting -> "Neutral", 
          PlotRange -> {{-1.1, 1.1}, {-1.1, 1.1}, {-1.1, 1.1}}, ViewPoint -> 
          Dynamic[FE`QMRITools`GradientTools`Private`vp$$368], ViewVertical -> 
          Dynamic[FE`QMRITools`GradientTools`Private`vv$$368], ViewAngle -> 
          Dynamic[FE`QMRITools`GradientTools`Private`va$$368], 
          SphericalRegion -> True]], 
       Attributes[QMRITools`GradientTools`Private`size$] = {Temporary}, 
       Attributes[QMRITools`GradientTools`Private`op$] = {Temporary}, 
       QMRITools`GradientTools`Private`ListSpherePloti[
         Pattern[QMRITools`GradientTools`Private`pts, 
          Blank[]], 
         Pattern[QMRITools`GradientTools`Private`col, 
          Blank[]], 
         Pattern[QMRITools`GradientTools`Private`size, 
          Blank[]]] := Graphics3D[{QMRITools`GradientTools`Private`col, 
          Map[
          Sphere[#, QMRITools`GradientTools`Private`size]& , 
           QMRITools`GradientTools`Private`pts]}], 
       QMRITools`GradientTools`Private`ListStickPlot[
         Pattern[QMRITools`GradientTools`Private`pts, 
          Blank[]], 
         Pattern[QMRITools`GradientTools`Private`size, 
          Blank[]]] := Graphics3D[{Gray, 
          Map[
          Tube[0.98 {#, -#}, QMRITools`GradientTools`Private`size]& , 
           QMRITools`GradientTools`Private`pts]}], 
       QMRITools`GradientTools`Private`PlotChartPoints[
         Pattern[QMRITools`GradientTools`Private`grad$, 
          Blank[]], {
          Pattern[QMRITools`GradientTools`Private`mirr$, 
           Blank[]], 
          Pattern[QMRITools`GradientTools`Private`col$, 
           Blank[]]}] := 
       Block[{QMRITools`GradientTools`Private`style}, 
         QMRITools`GradientTools`Private`style = If[
            ListQ[QMRITools`GradientTools`Private`col$], 
            Map[Directive[#, 
              PointSize[Large]]& , QMRITools`GradientTools`Private`col$], 
            Directive[QMRITools`GradientTools`Private`col$, 
             PointSize[Large]]]; Show[
           If[QMRITools`GradientTools`Private`grad$ === {}, 
            Graphics[], 
            Show[
             ListPlot[
              If[ArrayDepth[QMRITools`GradientTools`Private`grad$] == 2, 
               QMRITools`GradientTools`Private`CalcPolarPts[
               QMRITools`GradientTools`Private`grad$, 
                FE`QMRITools`GradientTools`Private`ctype$$368, 
                FE`QMRITools`GradientTools`Private`viewvec$$368], 
               Map[
               QMRITools`GradientTools`Private`CalcPolarPts[#, 
                 FE`QMRITools`GradientTools`Private`ctype$$368, 
                 FE`QMRITools`GradientTools`Private`viewvec$$368]& , 
                QMRITools`GradientTools`Private`grad$]], PlotStyle -> 
              QMRITools`GradientTools`Private`style], 
             If[
              Not[QMRITools`GradientTools`Private`mirr$], 
              Graphics[], 
              ListPlot[
               If[ArrayDepth[QMRITools`GradientTools`Private`grad$] == 2, 
                
                QMRITools`GradientTools`Private`CalcPolarPts[-
                 QMRITools`GradientTools`Private`grad$, 
                 FE`QMRITools`GradientTools`Private`ctype$$368, 
                 FE`QMRITools`GradientTools`Private`viewvec$$368], 
                
                QMRITools`GradientTools`Private`CalcPolarPts[-
                 Flatten[QMRITools`GradientTools`Private`grad$, 1], 
                 FE`QMRITools`GradientTools`Private`ctype$$368, 
                 FE`QMRITools`GradientTools`Private`viewvec$$368]], PlotStyle -> {
                 Darker[Gray], 
                 PointSize[Large]}]]]]]], 
       Attributes[QMRITools`GradientTools`Private`grad$] = {Temporary}, 
       Attributes[QMRITools`GradientTools`Private`mirr$] = {Temporary}, 
       Attributes[QMRITools`GradientTools`Private`col$] = {Temporary}, 
       QMRITools`GradientTools`Private`CalcPolarPts[
         Pattern[QMRITools`GradientTools`Private`grad, 
          Blank[]], 
         Pattern[QMRITools`GradientTools`Private`type, 
          Blank[]]] := 
       QMRITools`GradientTools`Private`CalcPolarPts[
        QMRITools`GradientTools`Private`grad, 
         QMRITools`GradientTools`Private`type, {0., 0.}], 
       QMRITools`GradientTools`Private`CalcPolarPts[
         Pattern[QMRITools`GradientTools`Private`grad, 
          Blank[]], 
         Pattern[QMRITools`GradientTools`Private`type, 
          Blank[]], 
         Pattern[QMRITools`GradientTools`Private`vec, 
          Blank[]]] := 
       Block[{QMRITools`GradientTools`Private`sig, 
          QMRITools`GradientTools`Private`phi, 
          QMRITools`GradientTools`Private`gradp, 
          QMRITools`GradientTools`Private`rot}, 
         QMRITools`GradientTools`Private`rot = Dot[
            RotationMatrix[
            Part[QMRITools`GradientTools`Private`vec, 1] 180 Degree, {0, 
             0, -1}], 
            RotationMatrix[
            Part[QMRITools`GradientTools`Private`vec, 2] 90 Degree, {0, 1, 
             0}]]; {QMRITools`GradientTools`Private`sig, 
            QMRITools`GradientTools`Private`phi} = Transpose[
            ReplaceAll[
             Quiet[
              Map[{90, 0} + {-1, 1} (Part[
                   ToSphericalCoordinates[
                    Dot[QMRITools`GradientTools`Private`rot, #]], 
                   Span[2, All]]/Degree)& , 
               QMRITools`GradientTools`Private`grad]], Indeterminate -> 0]]; 
         Part[{
            
            Transpose[{
             QMRITools`GradientTools`Private`phi 
              Cos[QMRITools`GradientTools`Private`sig Degree], 90 
              Sin[QMRITools`GradientTools`Private`sig Degree]}], 
            
            Transpose[{
             QMRITools`GradientTools`Private`phi, 
              QMRITools`GradientTools`Private`sig}], 
            
            Transpose[{
             QMRITools`GradientTools`Private`phi, 90 
              Sin[QMRITools`GradientTools`Private`sig Degree]}]}, 
           QMRITools`GradientTools`Private`type]], 
       QMRITools`GradientTools`Private`GradGrid[
         Pattern[QMRITools`GradientTools`Private`n$, 
          Blank[]], 
         Pattern[QMRITools`GradientTools`Private`full$, 
          Blank[]]] := 
       Block[{QMRITools`GradientTools`Private`points$$}, 
         QMRITools`GradientTools`Private`points$$ = If[
            EvenQ[QMRITools`GradientTools`Private`n$], 
            If[QMRITools`GradientTools`Private`full$, 
             N[
              Flatten[
               
               Table[{QMRITools`GradientTools`Private`i, 
                 QMRITools`GradientTools`Private`j, 
                 QMRITools`GradientTools`Private`k}, {
                QMRITools`GradientTools`Private`i, -1, 1, 2/(
                 QMRITools`GradientTools`Private`n$ - 1)}, {
                QMRITools`GradientTools`Private`j, -1, 1, 2/(
                 QMRITools`GradientTools`Private`n$ - 1)}, {
                QMRITools`GradientTools`Private`k, 1/(
                 QMRITools`GradientTools`Private`n$ - 1), 1, 2/(
                 QMRITools`GradientTools`Private`n$ - 1)}], 2]], 
             N[
              Flatten[
               
               Table[{QMRITools`GradientTools`Private`i, 
                 QMRITools`GradientTools`Private`j, 
                 QMRITools`GradientTools`Private`k}, {
                QMRITools`GradientTools`Private`i, -1 + 
                 1/QMRITools`GradientTools`Private`n$, 1, 2/
                 QMRITools`GradientTools`Private`n$}, {
                QMRITools`GradientTools`Private`j, -1 + 
                 1/QMRITools`GradientTools`Private`n$, 1, 2/
                 QMRITools`GradientTools`Private`n$}, {
                QMRITools`GradientTools`Private`k, 1/
                 QMRITools`GradientTools`Private`n$, 1, 2/
                 QMRITools`GradientTools`Private`n$}], 2]]], 
            QMRITools`GradientTools`Private`points$$ = N[
               Flatten[
                
                Table[{QMRITools`GradientTools`Private`i, 
                  QMRITools`GradientTools`Private`j, 
                  QMRITools`GradientTools`Private`k}, {
                 QMRITools`GradientTools`Private`i, -1, 1, 2/(
                  QMRITools`GradientTools`Private`n$ - 1)}, {
                 QMRITools`GradientTools`Private`j, -1, 1, 2/(
                  QMRITools`GradientTools`Private`n$ - 1)}, {
                 QMRITools`GradientTools`Private`k, 0, 1, 2/(
                  QMRITools`GradientTools`Private`n$ - 1)}], 2]]; DeleteCases[
              Map[If[
                Or[
                 And[Part[#, 1] < 0., Part[
                    SlotSequence[1], 3] == 0.], 
                 And[Part[#, 1] == 0., Part[#, 2] < 0, Part[
                    SlotSequence[1], 3] == 0.]], Null, #]& , 
               QMRITools`GradientTools`Private`points$$], Null]]; 
         QMRITools`GradientTools`Private`points$$ = N[
            Sort[
            QMRITools`GradientTools`Private`points$$, Norm[#] < Norm[#2]& ]]],
        QMRITools`GradientTools`Private`Prepare[
         Pattern[QMRITools`GradientTools`Private`numbs, 
          Blank[]], 
         Pattern[QMRITools`GradientTools`Private`half, 
          Blank[]]] := 
       QMRITools`GradientTools`Private`Prepare[
        QMRITools`GradientTools`Private`numbs, 
         QMRITools`GradientTools`Private`half, {}, 0], 
       QMRITools`GradientTools`Private`Prepare[
         Pattern[QMRITools`GradientTools`Private`numbs, 
          Blank[]], 
         Pattern[QMRITools`GradientTools`Private`half, 
          Blank[]], 
         Pattern[QMRITools`GradientTools`Private`fixed, 
          Blank[]]] := 
       QMRITools`GradientTools`Private`Prepare[
        QMRITools`GradientTools`Private`numbs, 
         QMRITools`GradientTools`Private`half, 
         QMRITools`GradientTools`Private`fixed, 0], 
       QMRITools`GradientTools`Private`Prepare[
         Pattern[QMRITools`GradientTools`Private`numbs$, 
          Blank[]], 
         Pattern[QMRITools`GradientTools`Private`half$, 
          Blank[]], 
         Pattern[QMRITools`GradientTools`Private`fixed$, 
          Blank[]], 
         Pattern[QMRITools`GradientTools`Private`alph$, 
          Blank[]]] := 
       Block[{QMRITools`GradientTools`Private`nf, 
          QMRITools`GradientTools`Private`ni, 
          QMRITools`GradientTools`Private`ni2, 
          QMRITools`GradientTools`Private`parti, 
          QMRITools`GradientTools`Private`part$$, 
          QMRITools`GradientTools`Private`velocity0, 
          QMRITools`GradientTools`Private`velocity1, 
          QMRITools`GradientTools`Private`vel$$}, 
         QMRITools`GradientTools`Private`nf = 
          Length[QMRITools`GradientTools`Private`fixed$]; 
         QMRITools`GradientTools`Private`ni = 
          Total[QMRITools`GradientTools`Private`numbs$] - 
           QMRITools`GradientTools`Private`nf; 
         If[Length[QMRITools`GradientTools`Private`numbs$] > 1, 
           QMRITools`GradientTools`Private`parti = Map[{1, 0} + #& , 
              Drop[
               Partition[
                Prepend[
                 Accumulate[QMRITools`GradientTools`Private`numbs$], 0], 2, 1,
                 1], -1]]; QMRITools`GradientTools`Private`part$$ = Map[Range[
               Part[#, 1], 
               Part[#, 2]]& , QMRITools`GradientTools`Private`parti]; 
           QMRITools`GradientTools`Private`ni2 = 
            If[QMRITools`GradientTools`Private`half$ == 0, 
              QMRITools`GradientTools`Private`ni, 2 
              QMRITools`GradientTools`Private`ni]; 
           QMRITools`GradientTools`Private`velocity0 = 
            ConstantArray[
             0, {QMRITools`GradientTools`Private`ni2, 
               QMRITools`GradientTools`Private`ni2, 3}]; 
           QMRITools`GradientTools`Private`velocity1 = 
            ConstantArray[
             1, {QMRITools`GradientTools`Private`ni2, 
               QMRITools`GradientTools`Private`ni2, 3}]; 
           If[QMRITools`GradientTools`Private`half$ == 1, 
             Map[Table[
               Part[QMRITools`GradientTools`Private`velocity0, 
                   QMRITools`GradientTools`Private`i, 
                   QMRITools`GradientTools`Private`j] = {1, 1, 1}; 
                Part[QMRITools`GradientTools`Private`velocity0, 
                   QMRITools`GradientTools`Private`i, 
                   QMRITools`GradientTools`Private`j + 
                   QMRITools`GradientTools`Private`ni] = {1, 1, 1}; 
                Part[QMRITools`GradientTools`Private`velocity0, 
                   QMRITools`GradientTools`Private`i + 
                   QMRITools`GradientTools`Private`ni, 
                   QMRITools`GradientTools`Private`j] = {1, 1, 1}; 
                Part[QMRITools`GradientTools`Private`velocity0, 
                   QMRITools`GradientTools`Private`i + 
                   QMRITools`GradientTools`Private`ni, 
                   QMRITools`GradientTools`Private`j + 
                   QMRITools`GradientTools`Private`ni] = {1, 1, 1}; Null, {
                QMRITools`GradientTools`Private`i, 
                 Part[#, 1], 
                 Part[#, 2]}, {QMRITools`GradientTools`Private`j, 
                 Part[#, 1], 
                 Part[#, 2]}]& , QMRITools`GradientTools`Private`parti]; Null,
              Map[Table[
               Part[QMRITools`GradientTools`Private`velocity0, 
                   QMRITools`GradientTools`Private`i, 
                   QMRITools`GradientTools`Private`j] = {1, 1, 1}; Null, {
                QMRITools`GradientTools`Private`i, 
                 Part[#, 1], 
                 Part[#, 2]}, {QMRITools`GradientTools`Private`j, 
                 Part[#, 1], 
                 Part[#, 2]}]& , QMRITools`GradientTools`Private`parti]; 
             Null]; QMRITools`GradientTools`Private`vel$$ = (1 - 
               QMRITools`GradientTools`Private`alph$) 
              QMRITools`GradientTools`Private`velocity0 + 
             QMRITools`GradientTools`Private`alph$ 
              QMRITools`GradientTools`Private`velocity1; {
             QMRITools`GradientTools`Private`RandInit[
             QMRITools`GradientTools`Private`ni, 
              QMRITools`GradientTools`Private`half$], 
             QMRITools`GradientTools`Private`vel$$, 
             QMRITools`GradientTools`Private`part$$}, 
           If[QMRITools`GradientTools`Private`fixed$ === {}, 
            QMRITools`GradientTools`Private`RandInit[
            QMRITools`GradientTools`Private`ni, 
             QMRITools`GradientTools`Private`half$], 
            Join[QMRITools`GradientTools`Private`fixed$, 
             QMRITools`GradientTools`Private`RandInit[
             QMRITools`GradientTools`Private`ni, 
              QMRITools`GradientTools`Private`half$]]]]], 
       QMRITools`GradientTools`Private`RandInit[
         Pattern[QMRITools`GradientTools`Private`ni, 
          Blank[]], 
         Pattern[QMRITools`GradientTools`Private`half, 
          Blank[]]] := If[QMRITools`GradientTools`Private`half == 1, 
         Map[Sign[Part[#, 3] + 10.^(-16)] Normalize[#]& , 
          RandomReal[
           NormalDistribution[], {QMRITools`GradientTools`Private`ni, 3}]], 
         Map[Normalize[#]& , 
          RandomReal[
           NormalDistribution[], {QMRITools`GradientTools`Private`ni, 3}]]], 
       QMRITools`GradientTools`Private`GradOptimize4C = 
       CompiledFunction[{11, 13.1, 5468}, {{
           Blank[Real], 2}, {
           Blank[Real], 3}, 
          Blank[Integer]}, {{3, 2, 0}, {3, 3, 1}, {2, 0, 0}, {3, 2, 
         3}}, {{0, {2, 0, 14}}, {4, {2, 0, 6}}, {1.*^16, {3, 0, 0}}, {{2, 3, 
          1}, {2, 1, 7}}, {2, {2, 0, 3}}, {-1, {2, 0, 12}}, {1, {2, 0, 2}}, {
          3, {2, 0, 5}}, {1.*^-16, {3, 0, 1}}}, {1, 15, 2, 0, 
         14}, {{33, 0, 4}, {24, 0, 2, 0}, {2, 0, 5}, {40, 43, 3, 2, 0, 3, 2, 
          9}, {42, "Join", 3, 2, 0, 3, 2, 9, 3, 2, 5}, {15, 3, 4, 1}, {3, 
          3}, {42, "CopyTensor", 3, 2, 0, 3, 2, 5}, {6, 4, 1}, {
          47, ConstantArray, 3, 2, 5, 2, 0, 1, 3, 3, 9}, {
          42, "Transpose", 3, 3, 9, 3, 3, 6}, {40, 43, 3, 3, 6, 3, 3, 4}, {44,
           9, 4, 6}, {47, ConstantArray, 3, 0, 0, 2, 0, 1, 3, 1, 4}, {
          47, DiagonalMatrix, 3, 1, 4, 3, 2, 2}, {
          42, "Transpose", 3, 3, 6, 2, 1, 7, 2, 0, 5, 3, 3, 4}, {40, 56, 3, 3,
           4, 3, 3, 3}, {42, "Total", 3, 3, 3, 2, 0, 6, 3, 2, 4}, {44, 4, 2, 
          4}, {40, 60, 3, 2, 4, 3, 2, 3}, {41, 259, 3, 3, 6, 3, 2, 3, 3, 3, 
          8}, {45, 1, 8, 3}, {42, "Total", 3, 3, 3, 2, 0, 6, 3, 2, 8}, {44, 5,
           8, 3}, {33, 3, 8}, {6, 12, 13}, {35, 8, 13, 3, 10}, {6, 14, 11}, {
          3, 4}, {37, 3, 11, 0, 12}, {47, Normalize, 3, 1, 12, 3, 1, 13}, {36,
           13, 13, 0, 10}, {4, 11, 8, -3}, {24, 0, 2, 0}, {2, 0, 7}, {38, 10, 
          2, -1, 0, 5, 1, 3}, {41, 257, 3, 0, 1, 3, 1, 3, 3, 1, 11}, {40, 44, 
          3, 1, 11, 2, 1, 3}, {41, 259, 2, 1, 3, 3, 2, 10, 3, 2, 11}, {
          42, "CopyTensor", 3, 2, 11, 3, 2, 10}, {3, 1}, {34, 1, 4, 2, 4, 2, 
          14, 2, 11}, {38, 10, 3, 11, 2, 3}, {1}}, 
         Function[{
          QMRITools`GradientTools`Private`points, 
           QMRITools`GradientTools`Private`vel, 
           QMRITools`GradientTools`Private`half}, 
          
          Block[{QMRITools`GradientTools`Private`n, 
            QMRITools`GradientTools`Private`n2, 
            QMRITools`GradientTools`Private`pointsi, 
            QMRITools`GradientTools`Private`pointsmat, 
            QMRITools`GradientTools`Private`distmatxyz, 
            QMRITools`GradientTools`Private`diag, 
            QMRITools`GradientTools`Private`distmat, 
            QMRITools`GradientTools`Private`velocity, 
            QMRITools`GradientTools`Private`pointsnew}, 
           QMRITools`GradientTools`Private`n = 
            Length[QMRITools`GradientTools`Private`points]; 
           If[QMRITools`GradientTools`Private`half == 1, 
             QMRITools`GradientTools`Private`pointsi = 
              Join[QMRITools`GradientTools`Private`points, -
                QMRITools`GradientTools`Private`points]; 
             QMRITools`GradientTools`Private`n2 = 
              2 QMRITools`GradientTools`Private`n; Null, 
             QMRITools`GradientTools`Private`pointsi = 
              QMRITools`GradientTools`Private`points; 
             QMRITools`GradientTools`Private`n2 = 
              QMRITools`GradientTools`Private`n; Null]; 
           QMRITools`GradientTools`Private`pointsmat = 
            ConstantArray[
             QMRITools`GradientTools`Private`pointsi, 
              QMRITools`GradientTools`Private`n2]; 
           QMRITools`GradientTools`Private`distmatxyz = 
            QMRITools`GradientTools`Private`pointsmat - Transpose[
             QMRITools`GradientTools`Private`pointsmat]; 
           QMRITools`GradientTools`Private`diag = DiagonalMatrix[
              ConstantArray[1.*^16, QMRITools`GradientTools`Private`n2]]; 
           QMRITools`GradientTools`Private`distmat = 
            Total[Transpose[
                QMRITools`GradientTools`Private`distmatxyz, {2, 3, 1}]^2] + 
             QMRITools`GradientTools`Private`diag; 
           QMRITools`GradientTools`Private`velocity = 
            Total[QMRITools`GradientTools`Private`vel (
               QMRITools`GradientTools`Private`distmatxyz/
               QMRITools`GradientTools`Private`distmat)]; 
           QMRITools`GradientTools`Private`pointsnew = 
            Map[Normalize[#]& , QMRITools`GradientTools`Private`pointsi + 
              QMRITools`GradientTools`Private`velocity]; 
           If[QMRITools`GradientTools`Private`half == 1, 
             QMRITools`GradientTools`Private`pointsnew = 
              Sign[Part[QMRITools`GradientTools`Private`pointsnew, All, 3] + 
                 1.*^-16] QMRITools`GradientTools`Private`pointsnew; Null]; 
           Part[QMRITools`GradientTools`Private`pointsnew, 
             Span[1, QMRITools`GradientTools`Private`n]]]], Evaluate], 
       QMRITools`GradientTools`Private`GradOptimize1C = 
       CompiledFunction[{11, 13.1, 5468}, {{
           Blank[Real], 2}, 
          Blank[Integer]}, {{3, 2, 0}, {2, 0, 0}, {3, 2, 
         8}}, {{0, {2, 0, 14}}, {4, {2, 0, 6}}, {{2, 3, 1}, {2, 1, 6}}, {
          2, {2, 0, 3}}, {-1, {2, 0, 12}}, {1, {2, 0, 2}}, {
          1.*^32, {3, 0, 0}}, {3, {2, 0, 5}}, {1.*^-16, {3, 0, 1}}}, {1, 15, 
         2, 0, 13}, {{33, 0, 4}, {24, 0, 2, 0}, {2, 0, 5}, {40, 43, 3, 2, 0, 
          3, 2, 7}, {42, "Join", 3, 2, 0, 3, 2, 7, 3, 2, 4}, {15, 3, 4, 1}, {
          3, 3}, {42, "CopyTensor", 3, 2, 0, 3, 2, 4}, {6, 4, 1}, {
          47, ConstantArray, 3, 2, 4, 2, 0, 1, 3, 3, 7}, {
          42, "Transpose", 3, 3, 7, 3, 3, 5}, {40, 43, 3, 3, 5, 3, 3, 3}, {44,
           7, 3, 5}, {47, ConstantArray, 3, 0, 0, 2, 0, 1, 3, 1, 3}, {
          47, DiagonalMatrix, 3, 1, 3, 3, 2, 1}, {
          42, "Transpose", 3, 3, 5, 2, 1, 6, 2, 0, 5, 3, 3, 3}, {40, 56, 3, 3,
           3, 3, 3, 2}, {42, "Total", 3, 3, 2, 2, 0, 6, 3, 2, 3}, {44, 3, 1, 
          3}, {40, 60, 3, 2, 3, 3, 2, 2}, {41, 259, 3, 3, 5, 3, 2, 2, 3, 3, 
          8}, {42, "Total", 3, 3, 8, 2, 0, 6, 3, 2, 2}, {44, 4, 2, 8}, {33, 8,
           8}, {6, 12, 13}, {35, 8, 13, 3, 9}, {6, 14, 11}, {3, 4}, {37, 8, 
          11, 0, 11}, {47, Normalize, 3, 1, 11, 3, 1, 12}, {36, 13, 12, 0, 
          9}, {4, 11, 8, -3}, {24, 0, 2, 0}, {2, 0, 7}, {38, 9, 2, -1, 0, 5, 
          1, 8}, {41, 257, 3, 0, 1, 3, 1, 8, 3, 1, 10}, {40, 44, 3, 1, 10, 2, 
          1, 8}, {41, 259, 2, 1, 8, 3, 2, 9, 3, 2, 10}, {
          42, "CopyTensor", 3, 2, 10, 3, 2, 9}, {3, 1}, {34, 1, 4, 2, 4, 2, 
          14, 2, 10}, {38, 9, 3, 10, 2, 8}, {1}}, 
         Function[{
          QMRITools`GradientTools`Private`points, 
           QMRITools`GradientTools`Private`half}, 
          
          Block[{QMRITools`GradientTools`Private`n, 
            QMRITools`GradientTools`Private`n2, 
            QMRITools`GradientTools`Private`pointsi, 
            QMRITools`GradientTools`Private`pointsmat, 
            QMRITools`GradientTools`Private`distmatxyz, 
            QMRITools`GradientTools`Private`diag, 
            QMRITools`GradientTools`Private`distmat, 
            QMRITools`GradientTools`Private`velocity, 
            QMRITools`GradientTools`Private`pointsnew, 
            QMRITools`GradientTools`Private`sign}, 
           QMRITools`GradientTools`Private`n = 
            Length[QMRITools`GradientTools`Private`points]; 
           If[QMRITools`GradientTools`Private`half == 1, 
             QMRITools`GradientTools`Private`pointsi = 
              Join[QMRITools`GradientTools`Private`points, -
                QMRITools`GradientTools`Private`points]; 
             QMRITools`GradientTools`Private`n2 = 
              2 QMRITools`GradientTools`Private`n; Null, 
             QMRITools`GradientTools`Private`pointsi = 
              QMRITools`GradientTools`Private`points; 
             QMRITools`GradientTools`Private`n2 = 
              QMRITools`GradientTools`Private`n]; 
           QMRITools`GradientTools`Private`pointsmat = 
            ConstantArray[
             QMRITools`GradientTools`Private`pointsi, 
              QMRITools`GradientTools`Private`n2]; 
           QMRITools`GradientTools`Private`distmatxyz = 
            QMRITools`GradientTools`Private`pointsmat - Transpose[
             QMRITools`GradientTools`Private`pointsmat]; 
           QMRITools`GradientTools`Private`diag = DiagonalMatrix[
              ConstantArray[1.*^32, QMRITools`GradientTools`Private`n2]]; 
           QMRITools`GradientTools`Private`distmat = 
            Total[Transpose[
                QMRITools`GradientTools`Private`distmatxyz, {2, 3, 1}]^2] + 
             QMRITools`GradientTools`Private`diag; 
           QMRITools`GradientTools`Private`velocity = 
            Total[QMRITools`GradientTools`Private`distmatxyz/
              QMRITools`GradientTools`Private`distmat]; 
           QMRITools`GradientTools`Private`pointsnew = 
            Map[Normalize[#]& , QMRITools`GradientTools`Private`pointsi + 
              QMRITools`GradientTools`Private`velocity]; 
           If[QMRITools`GradientTools`Private`half == 1, 
             QMRITools`GradientTools`Private`pointsnew = 
              Sign[Part[QMRITools`GradientTools`Private`pointsnew, All, 3] + 
                 1.*^-16] QMRITools`GradientTools`Private`pointsnew; Null]; 
           Part[QMRITools`GradientTools`Private`pointsnew, 
             Span[1, QMRITools`GradientTools`Private`n]]]], Evaluate], 
       QMRITools`GradientTools`Private`GradOptimize2C = 
       CompiledFunction[{11, 13.1, 5468}, {{
           Blank[Real], 2}, 
          Blank[Real], 
          Blank[Integer]}, {{3, 2, 0}, {3, 0, 0}, {2, 0, 0}, {3, 2, 
         9}}, {{0, {2, 0, 9}}, {{0., 0., 0.}, {3, 1, 11}}, {4, {2, 0, 6}}, {
          1.*^16, {3, 0, 1}}, {{2, 3, 1}, {2, 1, 6}}, {
          2, {2, 0, 3}}, {-1, {2, 0, 12}}, {1, {2, 0, 2}}, {3, {2, 0, 5}}, {
          1.*^-16, {3, 0, 5}}}, {1, 17, 6, 0, 
         16}, {{33, 0, 4}, {40, 43, 3, 2, 0, 3, 2, 10}, {
          42, "Join", 3, 2, 0, 3, 2, 10, 3, 2, 7}, {24, 0, 2, 0}, {2, 0, 6}, {
          40, 43, 3, 2, 0, 3, 2, 10}, {
          42, "Join", 3, 2, 0, 3, 2, 10, 3, 2, 4}, {
          42, "CopyTensor", 3, 2, 4, 3, 2, 7}, {15, 3, 4, 1}, {3, 3}, {
          42, "CopyTensor", 3, 2, 0, 3, 2, 7}, {6, 4, 1}, {
          47, ConstantArray, 3, 2, 7, 2, 0, 1, 3, 3, 4}, {
          42, "Transpose", 3, 3, 4, 3, 3, 10}, {40, 43, 3, 3, 10, 3, 3, 5}, {
          44, 4, 5, 10}, {47, ConstantArray, 3, 0, 1, 2, 0, 1, 3, 1, 5}, {
          47, DiagonalMatrix, 3, 1, 5, 3, 2, 1}, {
          42, "Transpose", 3, 3, 10, 2, 1, 6, 2, 0, 5, 3, 3, 5}, {40, 56, 3, 
          3, 5, 3, 3, 3}, {42, "Total", 3, 3, 3, 2, 0, 6, 3, 2, 5}, {44, 5, 1,
           5}, {40, 60, 3, 2, 5, 3, 2, 3}, {41, 259, 3, 3, 10, 3, 2, 3, 3, 3, 
          2}, {42, "Total", 3, 3, 2, 2, 0, 6, 3, 2, 3}, {24, 0, 2, 0}, {2, 0, 
          23}, {40, 50, 3, 0, 0, 2, 0, 10}, {6, 9, 7}, {35, 10, 2, 2}, {6, 9, 
          11}, {3, 2}, {36, 7, 11, 2, 2}, {4, 11, 10, -1}, {12, 2, 4, 10}, {
          10, 4, 3}, {13, 3, 0, 3}, {10, 10, 4}, {
          42, "IteratorCountR", 3, 0, 4, 3, 0, 3, 2, 0, 11}, {6, 9, 13}, {41, 
          258, 2, 0, 11, 2, 0, 12, 2, 0, 14}, {35, 14, 2, 9}, {6, 12, 15}, {3,
           3}, {12, 10, 15, 16}, {36, 13, 16, 2, 9}, {4, 15, 11, -2}, {
          42, "Join", 2, 1, 2, 2, 1, 9, 2, 1, 8}, {3, 9}, {40, 50, 3, 0, 0, 2,
           0, 7}, {6, 9, 13}, {35, 7, 2, 2}, {6, 9, 14}, {3, 2}, {36, 13, 14, 
          2, 2}, {4, 14, 7, -1}, {42, "CopyTensor", 2, 1, 2, 2, 1, 8}, {33, 8,
           14}, {6, 12, 11}, {35, 14, 11, 3, 2}, {6, 9, 10}, {3, 4}, {37, 8, 
          10, 2, 15}, {39, 3, 0, 15, 1, 11}, {36, 11, 11, 0, 2}, {4, 10, 
          14, -3}, {44, 7, 3, 9}, {33, 9, 7}, {6, 12, 14}, {35, 7, 14, 3, 
          12}, {6, 9, 11}, {3, 4}, {37, 9, 11, 0, 14}, {
          47, Normalize, 3, 1, 14, 3, 1, 15}, {36, 14, 15, 0, 12}, {4, 11, 
          7, -3}, {24, 0, 2, 0}, {2, 0, 7}, {38, 12, 2, -1, 0, 5, 1, 9}, {41, 
          257, 3, 0, 5, 3, 1, 9, 3, 1, 13}, {40, 44, 3, 1, 13, 2, 1, 9}, {41, 
          259, 2, 1, 9, 3, 2, 12, 3, 2, 13}, {
          42, "CopyTensor", 3, 2, 13, 3, 2, 12}, {3, 1}, {34, 1, 4, 2, 4, 2, 
          9, 2, 13}, {38, 12, 3, 13, 2, 9}, {1}}, 
         Function[{
          QMRITools`GradientTools`Private`points, 
           QMRITools`GradientTools`Private`nf, 
           QMRITools`GradientTools`Private`half}, 
          
          Block[{QMRITools`GradientTools`Private`n, 
            QMRITools`GradientTools`Private`n2, 
            QMRITools`GradientTools`Private`pointsi, 
            QMRITools`GradientTools`Private`pointsmat, 
            QMRITools`GradientTools`Private`distmatxyz, 
            QMRITools`GradientTools`Private`diag, 
            QMRITools`GradientTools`Private`distmat, 
            QMRITools`GradientTools`Private`velocity, 
            QMRITools`GradientTools`Private`pointsnew, 
            QMRITools`GradientTools`Private`rang}, 
           QMRITools`GradientTools`Private`n = 
            Length[QMRITools`GradientTools`Private`points]; 
           QMRITools`GradientTools`Private`pointsi = 
            Join[QMRITools`GradientTools`Private`points, -
              QMRITools`GradientTools`Private`points]; 
           If[QMRITools`GradientTools`Private`half == 1, 
             QMRITools`GradientTools`Private`pointsi = 
              Join[QMRITools`GradientTools`Private`points, -
                QMRITools`GradientTools`Private`points]; 
             QMRITools`GradientTools`Private`n2 = 
              2 QMRITools`GradientTools`Private`n; Null, 
             QMRITools`GradientTools`Private`pointsi = 
              QMRITools`GradientTools`Private`points; 
             QMRITools`GradientTools`Private`n2 = 
              QMRITools`GradientTools`Private`n]; 
           QMRITools`GradientTools`Private`pointsmat = 
            ConstantArray[
             QMRITools`GradientTools`Private`pointsi, 
              QMRITools`GradientTools`Private`n2]; 
           QMRITools`GradientTools`Private`distmatxyz = 
            QMRITools`GradientTools`Private`pointsmat - Transpose[
             QMRITools`GradientTools`Private`pointsmat]; 
           QMRITools`GradientTools`Private`diag = DiagonalMatrix[
              ConstantArray[1.*^16, QMRITools`GradientTools`Private`n2]]; 
           QMRITools`GradientTools`Private`distmat = 
            Total[Transpose[
                QMRITools`GradientTools`Private`distmatxyz, {2, 3, 1}]^2] + 
             QMRITools`GradientTools`Private`diag; 
           QMRITools`GradientTools`Private`velocity = 
            Total[QMRITools`GradientTools`Private`distmatxyz/
              QMRITools`GradientTools`Private`distmat]; 
           If[QMRITools`GradientTools`Private`half == 1, 
             QMRITools`GradientTools`Private`rang = Round[
                Join[
                 Range[1, QMRITools`GradientTools`Private`nf], 
                 Range[
                 1 + QMRITools`GradientTools`Private`n, 
                  QMRITools`GradientTools`Private`n + 
                  QMRITools`GradientTools`Private`nf]]]; Null, 
             QMRITools`GradientTools`Private`rang = Round[
                Range[1, QMRITools`GradientTools`Private`nf]]; Null]; 
           Map[(Part[QMRITools`GradientTools`Private`velocity, #] = {0., 0., 
              0.})& , QMRITools`GradientTools`Private`rang]; 
           QMRITools`GradientTools`Private`pointsnew = 
            Map[Normalize[#]& , QMRITools`GradientTools`Private`pointsi + 
              QMRITools`GradientTools`Private`velocity]; 
           If[QMRITools`GradientTools`Private`half == 1, 
             QMRITools`GradientTools`Private`pointsnew = 
              Sign[Part[QMRITools`GradientTools`Private`pointsnew, All, 3] + 
                 1.*^-16] QMRITools`GradientTools`Private`pointsnew; Null]; 
           Part[QMRITools`GradientTools`Private`pointsnew, 
             Span[1, QMRITools`GradientTools`Private`n]]]], Evaluate], 
       QMRITools`GradientTools`Private`GradOptimize3C = 
       CompiledFunction[{11, 13.1, 5468}, {{
           Blank[Real], 2}, {
           Blank[Real], 1}, 
          Blank[Real]}, {{3, 2, 0}, {3, 1, 1}, {3, 0, 0}, {3, 2, 
         13}}, {{0, {2, 0, 7}}, {{0., 0., 0.}, {3, 1, 15}}, {4, {2, 0, 4}}, {
          10., {3, 0, 5}}, {{2, 3, 1}, {2, 1, 10}}, {16, {2, 0, 14}}, {
          2, {2, 0, 1}}, {-1, {2, 0, 10}}, {1.*^32, {3, 0, 1}}, {
          1, {2, 0, 5}}, {3, {2, 0, 3}}}, {0, 15, 6, 0, 
         19}, {{33, 0, 0}, {40, 43, 3, 2, 0, 3, 2, 14}, {
          42, "Join", 3, 2, 0, 3, 2, 14, 3, 2, 8}, {
          42, "Join", 3, 1, 1, 3, 1, 1, 3, 1, 14}, {15, 1, 0, 6}, {
          47, ConstantArray, 3, 2, 8, 2, 0, 6, 3, 3, 5}, {15, 1, 0, 6}, {
          47, ConstantArray, 3, 1, 14, 2, 0, 6, 3, 2, 2}, {
          42, "Transpose", 3, 3, 5, 3, 3, 12}, {40, 43, 3, 3, 12, 3, 3, 7}, {
          44, 5, 7, 12}, {42, "Transpose", 3, 2, 2, 3, 2, 7}, {45, 2, 7, 9}, {
          15, 1, 0, 6}, {47, ConstantArray, 3, 0, 1, 2, 0, 6, 3, 1, 7}, {
          47, DiagonalMatrix, 3, 1, 7, 3, 2, 6}, {
          42, "Transpose", 3, 3, 12, 2, 1, 10, 2, 0, 3, 3, 3, 7}, {40, 56, 3, 
          3, 7, 3, 3, 4}, {42, "Total", 3, 3, 4, 2, 0, 4, 3, 2, 7}, {44, 7, 6,
           7}, {40, 60, 3, 2, 7, 3, 2, 4}, {41, 259, 3, 3, 12, 3, 2, 4, 3, 3, 
          3}, {41, 259, 3, 2, 9, 3, 3, 3, 3, 3, 4}, {
          42, "Total", 3, 3, 4, 2, 0, 4, 3, 2, 3}, {40, 50, 3, 0, 0, 2, 0, 
          6}, {6, 7, 9}, {35, 6, 2, 4}, {6, 7, 11}, {3, 2}, {36, 9, 11, 2, 
          4}, {4, 11, 6, -1}, {12, 5, 0, 6}, {10, 0, 3}, {13, 3, 0, 3}, {10, 
          6, 4}, {42, "IteratorCountR", 3, 0, 4, 3, 0, 3, 2, 0, 11}, {6, 7, 
          2}, {41, 258, 2, 0, 11, 2, 0, 10, 2, 0, 8}, {35, 8, 2, 13}, {6, 10, 
          12}, {3, 3}, {12, 6, 12, 13}, {36, 2, 13, 2, 13}, {4, 12, 11, -2}, {
          42, "Join", 2, 1, 4, 2, 1, 13, 2, 1, 11}, {46, 
           
           Function[{
            QMRITools`GradientTools`Private`points, 
             QMRITools`GradientTools`Private`char, 
             QMRITools`GradientTools`Private`nf}, 
            Part[QMRITools`GradientTools`Private`velocity, 
              QMRITools`GradientTools`Private`rang] = {0., 0., 0.}], {
           QMRITools`GradientTools`Private`chari, 3, 1, 14, Block}, {
           QMRITools`GradientTools`Private`distmatxyz, 3, 3, 12, Block}, {
           QMRITools`GradientTools`Private`n, 2, 0, 0, Block}, {
           QMRITools`GradientTools`Private`pointsi, 3, 2, 8, Block}, {
           QMRITools`GradientTools`Private`chars, 3, 2, 9, Block}, {
           QMRITools`GradientTools`Private`charmat, 3, 2, 2, Block}, {
           QMRITools`GradientTools`Private`diag, 3, 2, 6, Block}, {
           QMRITools`GradientTools`Private`rang, 2, 1, 11, Block}, {
           QMRITools`GradientTools`Private`velocity, 3, 2, 3, Block}, {
           QMRITools`GradientTools`Private`pointsmat, 3, 3, 5, Block}, {
           QMRITools`GradientTools`Private`distmat, 3, 2, 7, Block}, 3, 2, 0, 
           3, 1, 1, 3, 0, 0, 6, 0, 17}, {44, 8, 3, 4}, {33, 4, 8}, {6, 10, 
          12}, {35, 8, 12, 3, 16}, {6, 7, 6}, {3, 11}, {37, 4, 6, 0, 17}, {38,
           17, 0, 3, 0, 2}, {41, 263, 3, 0, 5, 2, 0, 14, 3, 0, 3}, {40, 60, 3,
           0, 3, 3, 0, 4}, {13, 2, 4, 2}, {40, 44, 3, 0, 2, 2, 0, 13}, {37, 4,
           6, 0, 17}, {47, Normalize, 3, 1, 17, 3, 1, 18}, {41, 259, 2, 0, 13,
           3, 1, 18, 3, 1, 17}, {36, 12, 17, 0, 16}, {4, 6, 8, -10}, {34, 1, 
          4, 5, 0, 5, 7, 2, 4}, {38, 16, 3, 4, 2, 13}, {1}}, 
         Function[{
          QMRITools`GradientTools`Private`points, 
           QMRITools`GradientTools`Private`char, 
           QMRITools`GradientTools`Private`nf}, 
          
          Block[{QMRITools`GradientTools`Private`n, 
            QMRITools`GradientTools`Private`pointsi, 
            QMRITools`GradientTools`Private`pointsmat, 
            QMRITools`GradientTools`Private`distmatxyz, 
            QMRITools`GradientTools`Private`diag, 
            QMRITools`GradientTools`Private`distmat, 
            QMRITools`GradientTools`Private`velocity, 
            QMRITools`GradientTools`Private`pointsnew, 
            QMRITools`GradientTools`Private`chari, 
            QMRITools`GradientTools`Private`charmat, 
            QMRITools`GradientTools`Private`chars, 
            QMRITools`GradientTools`Private`rang}, 
           QMRITools`GradientTools`Private`n = 
            Length[QMRITools`GradientTools`Private`points]; 
           QMRITools`GradientTools`Private`pointsi = 
            Join[QMRITools`GradientTools`Private`points, -
              QMRITools`GradientTools`Private`points]; 
           QMRITools`GradientTools`Private`chari = 
            Join[QMRITools`GradientTools`Private`char, 
              QMRITools`GradientTools`Private`char]; 
           QMRITools`GradientTools`Private`pointsmat = 
            ConstantArray[
             QMRITools`GradientTools`Private`pointsi, 2 
              QMRITools`GradientTools`Private`n]; 
           QMRITools`GradientTools`Private`charmat = 
            ConstantArray[
             QMRITools`GradientTools`Private`chari, 2 
              QMRITools`GradientTools`Private`n]; 
           QMRITools`GradientTools`Private`distmatxyz = 
            QMRITools`GradientTools`Private`pointsmat - Transpose[
             QMRITools`GradientTools`Private`pointsmat]; 
           QMRITools`GradientTools`Private`chars = 
            QMRITools`GradientTools`Private`charmat 
             Transpose[QMRITools`GradientTools`Private`charmat]; 
           QMRITools`GradientTools`Private`diag = DiagonalMatrix[
              ConstantArray[1.*^32, 2 QMRITools`GradientTools`Private`n]]; 
           QMRITools`GradientTools`Private`distmat = 
            Total[Transpose[
                QMRITools`GradientTools`Private`distmatxyz, {2, 3, 1}]^2] + 
             QMRITools`GradientTools`Private`diag; 
           QMRITools`GradientTools`Private`velocity = 
            Total[QMRITools`GradientTools`Private`chars (
               QMRITools`GradientTools`Private`distmatxyz/
               QMRITools`GradientTools`Private`distmat)]; 
           QMRITools`GradientTools`Private`rang = Round[
              Join[
               Range[1, QMRITools`GradientTools`Private`nf], 
               Range[
               1 + QMRITools`GradientTools`Private`n, 
                QMRITools`GradientTools`Private`n + 
                QMRITools`GradientTools`Private`nf]]]; 
           Part[QMRITools`GradientTools`Private`velocity, 
              QMRITools`GradientTools`Private`rang] = {0., 0., 0.}; 
           QMRITools`GradientTools`Private`pointsnew = 
            Map[Sign[Part[#, 3] + 10.^(-16)] Normalize[#]& , 
              QMRITools`GradientTools`Private`pointsi + 
              QMRITools`GradientTools`Private`velocity]; 
           Part[QMRITools`GradientTools`Private`pointsnew, 
             Span[1, QMRITools`GradientTools`Private`n]]]], Evaluate], {
       QMRITools`GradientTools`Private`bvall$$ = {1000}, 
        QMRITools`GradientTools`Private`inter$$ = True, 
        QMRITools`GradientTools`Private`MakeChart[
          Pattern[QMRITools`GradientTools`Private`type, 
           Blank[]]] := 
        Module[{QMRITools`GradientTools`Private`ranX, 
           QMRITools`GradientTools`Private`ranY, 
           QMRITools`GradientTools`Private`coors, 
           QMRITools`GradientTools`Private`lab}, 
          QMRITools`GradientTools`Private`ranX = Range[-180, 180, 30]; 
          QMRITools`GradientTools`Private`ranY = Range[-90, 90, 10]; 
          QMRITools`GradientTools`Private`coors = Part[{
              N[
               
               Table[{QMRITools`GradientTools`Private`j 
                 Cos[QMRITools`GradientTools`Private`i Degree], 90 
                 Sin[QMRITools`GradientTools`Private`i Degree]}, {
                QMRITools`GradientTools`Private`j, 
                 QMRITools`GradientTools`Private`ranX}, {
                QMRITools`GradientTools`Private`i, 
                 QMRITools`GradientTools`Private`ranY}]], 
              N[
               
               Table[{QMRITools`GradientTools`Private`j, 
                 QMRITools`GradientTools`Private`i}, {
                QMRITools`GradientTools`Private`j, 
                 QMRITools`GradientTools`Private`ranX}, {
                QMRITools`GradientTools`Private`i, 
                 QMRITools`GradientTools`Private`ranY}]], 
              N[
               
               Table[{QMRITools`GradientTools`Private`j, 90 
                 Sin[QMRITools`GradientTools`Private`i Degree]}, {
                QMRITools`GradientTools`Private`j, 
                 QMRITools`GradientTools`Private`ranX}, {
                QMRITools`GradientTools`Private`i, 
                 QMRITools`GradientTools`Private`ranY}]]}, 
             QMRITools`GradientTools`Private`type]; 
          QMRITools`GradientTools`Private`lab = 
           Part[{{"\[Phi] Cos[\[Theta]] (\[Degree])", 
               "\[Theta] Sin[\[Theta]] (\[Degree])"}, {
              "\[Phi] \(\[Degree])", "\[Theta] (\[Degree])"}, {
              "\[Phi] (\[Degree])", "\[Theta] Sin[\[Theta]] (\[Degree])"}}, 
             QMRITools`GradientTools`Private`type]; Graphics[{{
              Lighter[
               Lighter[
                Lighter[Gray]]], 
              Polygon[
               Join[
                First[QMRITools`GradientTools`Private`coors], 
                Reverse[
                 Last[QMRITools`GradientTools`Private`coors]]]]}, 
             Map[{
               Lighter[Gray], 
               Line[#]}& , QMRITools`GradientTools`Private`coors], 
             Map[{
               Lighter[Gray], 
               Line[#]}& , 
              Transpose[QMRITools`GradientTools`Private`coors]]}, AspectRatio -> 
            0.8, ImageSize -> 400, PlotRange -> {{-185, 185}, {-95, 95}}, 
            LabelStyle -> 
            Directive[{Bold, Black, Medium, FontFamily -> "Helvetica"}], 
            Frame -> True, FrameStyle -> Thick, Axes -> True, AxesStyle -> 
            Thick, FrameTicks -> {{
               Part[
                Thread[{
                  Round[
                   Part[QMRITools`GradientTools`Private`coors, 1, All, 2]], 
                  QMRITools`GradientTools`Private`ranY}], 
                Span[1, All, 3]], None}, {
              QMRITools`GradientTools`Private`ranX, None}}, FrameLabel -> 
            QMRITools`GradientTools`Private`lab]], 
        QMRITools`GradientTools`Private`charts$$ = 
        Map[QMRITools`GradientTools`Private`MakeChart, {1, 2, 3}], 
        QMRITools`GradientTools`Private`SpherePlot[
          Pattern[QMRITools`GradientTools`Private`size$, 
           Blank[]], 
          Pattern[QMRITools`GradientTools`Private`op$, 
           Blank[]]] := If[
          Or[
          QMRITools`GradientTools`Private`size$ == 0, 
           QMRITools`GradientTools`Private`size$ == 0.], 
          
          Graphics3D[{}, Lighting -> "Neutral", 
           PlotRange -> {{-1.1, 1.1}, {-1.1, 1.1}, {-1.1, 1.1}}, ViewPoint -> 
           Dynamic[QMRITools`GradientTools`Private`vp$$], ViewVertical -> 
           Dynamic[QMRITools`GradientTools`Private`vv$$], ViewAngle -> 
           Dynamic[QMRITools`GradientTools`Private`va$$], SphericalRegion -> 
           True], 
          Graphics3D[{White, 
            Opacity[QMRITools`GradientTools`Private`op$], 
            Sphere[{0, 0, 0}, 0.95 QMRITools`GradientTools`Private`size$]}, 
           Lighting -> "Neutral", 
           PlotRange -> {{-1.1, 1.1}, {-1.1, 1.1}, {-1.1, 1.1}}, ViewPoint -> 
           Dynamic[QMRITools`GradientTools`Private`vp$$], ViewVertical -> 
           Dynamic[QMRITools`GradientTools`Private`vv$$], ViewAngle -> 
           Dynamic[QMRITools`GradientTools`Private`va$$], SphericalRegion -> 
           True]], QMRITools`GradientTools`Private`PlotChartPoints[
          Pattern[QMRITools`GradientTools`Private`grad$, 
           Blank[]], {
           Pattern[QMRITools`GradientTools`Private`mirr$, 
            Blank[]], 
           Pattern[QMRITools`GradientTools`Private`col$, 
            Blank[]]}] := 
        Block[{QMRITools`GradientTools`Private`style}, 
          QMRITools`GradientTools`Private`style = If[
             ListQ[QMRITools`GradientTools`Private`col$], 
             Map[Directive[#, 
               PointSize[Large]]& , QMRITools`GradientTools`Private`col$], 
             Directive[QMRITools`GradientTools`Private`col$, 
              PointSize[Large]]]; Show[
            If[QMRITools`GradientTools`Private`grad$ === {}, 
             Graphics[], 
             Show[
              ListPlot[
               If[ArrayDepth[QMRITools`GradientTools`Private`grad$] == 2, 
                QMRITools`GradientTools`Private`CalcPolarPts[
                QMRITools`GradientTools`Private`grad$, 
                 QMRITools`GradientTools`Private`ctype$$, 
                 QMRITools`GradientTools`Private`viewvec$$], 
                Map[
                QMRITools`GradientTools`Private`CalcPolarPts[#, 
                  QMRITools`GradientTools`Private`ctype$$, 
                  QMRITools`GradientTools`Private`viewvec$$]& , 
                 QMRITools`GradientTools`Private`grad$]], PlotStyle -> 
               QMRITools`GradientTools`Private`style], 
              If[
               Not[QMRITools`GradientTools`Private`mirr$], 
               Graphics[], 
               ListPlot[
                If[ArrayDepth[QMRITools`GradientTools`Private`grad$] == 2, 
                 
                 QMRITools`GradientTools`Private`CalcPolarPts[-
                  QMRITools`GradientTools`Private`grad$, 
                  QMRITools`GradientTools`Private`ctype$$, 
                  QMRITools`GradientTools`Private`viewvec$$], 
                 
                 QMRITools`GradientTools`Private`CalcPolarPts[-
                  Flatten[QMRITools`GradientTools`Private`grad$, 1], 
                  QMRITools`GradientTools`Private`ctype$$, 
                  QMRITools`GradientTools`Private`viewvec$$]], PlotStyle -> {
                  Darker[Gray], 
                  PointSize[Large]}]]]]]]}}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.879243788896448*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"2f19b3a0-59dc-42d7-b449-41aca9cb7e92"]
},
WindowSize->{1920, 1117},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
FrontEndVersion->"13.1 for Microsoft Windows (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"755920b6-112f-4155-bc94-b6081b4c7708"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[1488, 33, 176593, 3113, 596, "Output",ExpressionUUID->"2f19b3a0-59dc-42d7-b449-41aca9cb7e92"]
}
]
*)

(* End of internal cache information *)

(* NotebookSignature YwTE9C15#oIRuDwEXTV1Y8lu *)
